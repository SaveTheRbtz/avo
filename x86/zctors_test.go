// Code generated by command: avogen -output zctors_test.go ctorstest. DO NOT EDIT.

package x86

import (
	"math"
	"testing"

	"github.com/mmcloughlin/avo/operand"
	"github.com/mmcloughlin/avo/reg"
)

func TestADCBValidForms(t *testing.T) {
	t.Run("form=imm8_al", func(t *testing.T) {
		if _, err := ADCB(operand.Imm(math.MaxInt8), reg.AL); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := ADCB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := ADCB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := ADCB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := ADCB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := ADCB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADCLValidForms(t *testing.T) {
	t.Run("form=imm32_eax", func(t *testing.T) {
		if _, err := ADCL(operand.Imm(math.MaxInt32), reg.EAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m32", func(t *testing.T) {
		if _, err := ADCL(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32", func(t *testing.T) {
		if _, err := ADCL(operand.Imm(math.MaxInt32), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := ADCL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := ADCL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := ADCL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := ADCL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := ADCL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADCQValidForms(t *testing.T) {
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := ADCQ(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := ADCQ(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_rax", func(t *testing.T) {
		if _, err := ADCQ(operand.Imm(math.MaxInt32), reg.RAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := ADCQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := ADCQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := ADCQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := ADCQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := ADCQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADCWValidForms(t *testing.T) {
	t.Run("form=imm16_ax", func(t *testing.T) {
		if _, err := ADCW(operand.Imm(math.MaxInt16), reg.AX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_m16", func(t *testing.T) {
		if _, err := ADCW(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16", func(t *testing.T) {
		if _, err := ADCW(operand.Imm(math.MaxInt16), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCW(operand.Imm(math.MaxInt16), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := ADCW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := ADCW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := ADCW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := ADCW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := ADCW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADCW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADCXLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := ADCXL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := ADCXL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADCXQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := ADCXQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := ADCXQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDBValidForms(t *testing.T) {
	t.Run("form=imm8_al", func(t *testing.T) {
		if _, err := ADDB(operand.Imm(math.MaxInt8), reg.AL); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := ADDB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := ADDB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := ADDB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := ADDB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := ADDB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDLValidForms(t *testing.T) {
	t.Run("form=imm32_eax", func(t *testing.T) {
		if _, err := ADDL(operand.Imm(math.MaxInt32), reg.EAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m32", func(t *testing.T) {
		if _, err := ADDL(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32", func(t *testing.T) {
		if _, err := ADDL(operand.Imm(math.MaxInt32), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := ADDL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := ADDL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := ADDL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := ADDL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := ADDL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ADDPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ADDPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDQValidForms(t *testing.T) {
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := ADDQ(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := ADDQ(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_rax", func(t *testing.T) {
		if _, err := ADDQ(operand.Imm(math.MaxInt32), reg.RAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := ADDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := ADDQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := ADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := ADDQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := ADDQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := ADDSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ADDSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := ADDSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ADDSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDSUBPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ADDSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ADDSUBPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDSUBPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ADDSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ADDSUBPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADDWValidForms(t *testing.T) {
	t.Run("form=imm16_ax", func(t *testing.T) {
		if _, err := ADDW(operand.Imm(math.MaxInt16), reg.AX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_m16", func(t *testing.T) {
		if _, err := ADDW(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16", func(t *testing.T) {
		if _, err := ADDW(operand.Imm(math.MaxInt16), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDW(operand.Imm(math.MaxInt16), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := ADDW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := ADDW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := ADDW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := ADDW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := ADDW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ADDW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADOXLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := ADOXL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := ADOXL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestADOXQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := ADOXQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := ADOXQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestAESDECValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := AESDEC(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := AESDEC(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestAESDECLASTValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := AESDECLAST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := AESDECLAST(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestAESENCValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := AESENC(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := AESENC(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestAESENCLASTValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := AESENCLAST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := AESENCLAST(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestAESIMCValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := AESIMC(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := AESIMC(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestAESKEYGENASSISTValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := AESKEYGENASSIST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := AESKEYGENASSIST(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDBValidForms(t *testing.T) {
	t.Run("form=imm8_al", func(t *testing.T) {
		if _, err := ANDB(operand.Imm(math.MaxInt8), reg.AL); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := ANDB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := ANDB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := ANDB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := ANDB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := ANDB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDLValidForms(t *testing.T) {
	t.Run("form=imm32_eax", func(t *testing.T) {
		if _, err := ANDL(operand.Imm(math.MaxInt32), reg.EAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m32", func(t *testing.T) {
		if _, err := ANDL(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32", func(t *testing.T) {
		if _, err := ANDL(operand.Imm(math.MaxInt32), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := ANDL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := ANDL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := ANDL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := ANDL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := ANDL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDNLValidForms(t *testing.T) {
	t.Run("form=m32_r32_r32", func(t *testing.T) {
		if _, err := ANDNL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32_r32", func(t *testing.T) {
		if _, err := ANDNL(reg.R10L, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDNPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ANDNPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ANDNPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDNPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ANDNPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ANDNPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDNQValidForms(t *testing.T) {
	t.Run("form=m64_r64_r64", func(t *testing.T) {
		if _, err := ANDNQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64_r64", func(t *testing.T) {
		if _, err := ANDNQ(reg.R11, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ANDPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ANDPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDQValidForms(t *testing.T) {
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := ANDQ(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := ANDQ(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_rax", func(t *testing.T) {
		if _, err := ANDQ(operand.Imm(math.MaxInt32), reg.RAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := ANDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := ANDQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := ANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := ANDQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := ANDQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestANDWValidForms(t *testing.T) {
	t.Run("form=imm16_ax", func(t *testing.T) {
		if _, err := ANDW(operand.Imm(math.MaxInt16), reg.AX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_m16", func(t *testing.T) {
		if _, err := ANDW(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16", func(t *testing.T) {
		if _, err := ANDW(operand.Imm(math.MaxInt16), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDW(operand.Imm(math.MaxInt16), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := ANDW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := ANDW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := ANDW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := ANDW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := ANDW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ANDW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBEXTRLValidForms(t *testing.T) {
	t.Run("form=r32_m32_r32", func(t *testing.T) {
		if _, err := BEXTRL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32_r32", func(t *testing.T) {
		if _, err := BEXTRL(reg.R10L, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBEXTRQValidForms(t *testing.T) {
	t.Run("form=r64_m64_r64", func(t *testing.T) {
		if _, err := BEXTRQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64_r64", func(t *testing.T) {
		if _, err := BEXTRQ(reg.R11, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLENDPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := BLENDPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := BLENDPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLENDPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := BLENDPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := BLENDPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLENDVPDValidForms(t *testing.T) {
	t.Run("form=xmm0_m128_xmm", func(t *testing.T) {
		if _, err := BLENDVPD(reg.X0, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm0_xmm_xmm", func(t *testing.T) {
		if _, err := BLENDVPD(reg.X0, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLENDVPSValidForms(t *testing.T) {
	t.Run("form=xmm0_m128_xmm", func(t *testing.T) {
		if _, err := BLENDVPS(reg.X0, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm0_xmm_xmm", func(t *testing.T) {
		if _, err := BLENDVPS(reg.X0, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLSILValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := BLSIL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := BLSIL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLSIQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := BLSIQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := BLSIQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLSMSKLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := BLSMSKL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := BLSMSKL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLSMSKQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := BLSMSKQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := BLSMSKQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLSRLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := BLSRL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := BLSRL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBLSRQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := BLSRQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := BLSRQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBSFLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := BSFL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := BSFL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBSFQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := BSFQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := BSFQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBSFWValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := BSFW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BSFW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := BSFW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BSFW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := BSFW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BSFW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBSRLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := BSRL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := BSRL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBSRQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := BSRQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := BSRQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBSRWValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := BSRW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BSRW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := BSRW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BSRW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := BSRW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BSRW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBSWAPLValidForms(t *testing.T) {
	t.Run("form=r32", func(t *testing.T) {
		if _, err := BSWAPL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBSWAPQValidForms(t *testing.T) {
	t.Run("form=r64", func(t *testing.T) {
		if _, err := BSWAPQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTCLValidForms(t *testing.T) {
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := BTCL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := BTCL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := BTCL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := BTCL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTCQValidForms(t *testing.T) {
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := BTCQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := BTCQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := BTCQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := BTCQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTCWValidForms(t *testing.T) {
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := BTCW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := BTCW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTCW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := BTCW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := BTCW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := BTCW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTCW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := BTCW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTCW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTLValidForms(t *testing.T) {
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := BTL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := BTL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := BTL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := BTL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTQValidForms(t *testing.T) {
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := BTQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := BTQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := BTQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := BTQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTRLValidForms(t *testing.T) {
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := BTRL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := BTRL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := BTRL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := BTRL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTRQValidForms(t *testing.T) {
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := BTRQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := BTRQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := BTRQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := BTRQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTRWValidForms(t *testing.T) {
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := BTRW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := BTRW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTRW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := BTRW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := BTRW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := BTRW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTRW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := BTRW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTRW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTSLValidForms(t *testing.T) {
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := BTSL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := BTSL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := BTSL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := BTSL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTSQValidForms(t *testing.T) {
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := BTSQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := BTSQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := BTSQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := BTSQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTSWValidForms(t *testing.T) {
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := BTSW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := BTSW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTSW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := BTSW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := BTSW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := BTSW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTSW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := BTSW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTSW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBTWValidForms(t *testing.T) {
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := BTW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := BTW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := BTW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := BTW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := BTW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := BTW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := BTW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBZHILValidForms(t *testing.T) {
	t.Run("form=r32_m32_r32", func(t *testing.T) {
		if _, err := BZHIL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32_r32", func(t *testing.T) {
		if _, err := BZHIL(reg.R10L, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestBZHIQValidForms(t *testing.T) {
	t.Run("form=r64_m64_r64", func(t *testing.T) {
		if _, err := BZHIQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64_r64", func(t *testing.T) {
		if _, err := BZHIQ(reg.R11, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCALLValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := CALL(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := CALL(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCBWValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CBW(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCDQValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CDQ(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCDQEValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CDQE(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCLCValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CLC(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCLDValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CLD(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCLFLUSHValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := CLFLUSH(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCLFLUSHOPTValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := CLFLUSHOPT(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMCValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CMC(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLCCValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLCC(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLCC(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLCSValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLCS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLCS(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLEQValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLEQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLEQ(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLGEValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLGE(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLGE(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLGTValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLGT(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLGT(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLHIValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLHI(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLHI(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLLEValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLLE(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLLE(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLLSValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLLS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLLS(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLLTValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLLT(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLLT(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLMIValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLMI(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLMI(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLNEValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLNE(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLNE(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLOCValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLOC(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLOC(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLOSValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLOS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLOS(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLPCValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLPC(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLPC(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLPLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLPL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLPL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVLPSValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMOVLPS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMOVLPS(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQCCValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQCC(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQCC(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQCSValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQCS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQCS(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQEQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQEQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQEQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQGEValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQGE(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQGE(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQGTValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQGT(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQGT(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQHIValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQHI(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQHI(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQLEValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQLE(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQLE(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQLSValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQLS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQLS(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQLTValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQLT(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQLT(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQMIValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQMI(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQMI(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQNEValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQNE(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQNE(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQOCValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQOC(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQOC(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQOSValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQOS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQOS(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQPCValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQPC(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQPC(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQPLValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQPL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQPL(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVQPSValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMOVQPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMOVQPS(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWCCValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWCC(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWCC(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWCC(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWCC(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWCC(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWCC(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWCSValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWCS(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWCS(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWCS(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWCS(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWCS(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWCS(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWEQValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWEQ(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWEQ(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWEQ(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWEQ(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWEQ(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWEQ(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWGEValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWGE(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWGE(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWGE(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWGE(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWGE(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWGE(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWGTValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWGT(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWGT(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWGT(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWGT(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWGT(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWGT(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWHIValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWHI(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWHI(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWHI(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWHI(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWHI(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWHI(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWLEValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWLE(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLE(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWLE(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLE(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLE(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLE(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWLSValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWLS(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLS(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWLS(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLS(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLS(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLS(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWLTValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWLT(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLT(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWLT(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLT(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLT(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWLT(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWMIValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWMI(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWMI(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWMI(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWMI(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWMI(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWMI(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWNEValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWNE(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWNE(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWNE(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWNE(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWNE(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWNE(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWOCValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWOC(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWOC(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWOC(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWOC(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWOC(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWOC(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWOSValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWOS(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWOS(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWOS(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWOS(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWOS(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWOS(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWPCValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWPC(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPC(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWPC(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPC(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPC(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPC(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWPLValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWPL(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPL(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWPL(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPL(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPL(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPL(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMOVWPSValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMOVWPS(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPS(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMOVWPS(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPS(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPS(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMOVWPS(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPBValidForms(t *testing.T) {
	t.Run("form=al_imm8", func(t *testing.T) {
		if _, err := CMPB(reg.AL, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_imm8", func(t *testing.T) {
		if _, err := CMPB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := CMPB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_imm8", func(t *testing.T) {
		if _, err := CMPB(reg.CH, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.BL, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.R13B, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := CMPB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := CMPB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPLValidForms(t *testing.T) {
	t.Run("form=eax_imm32", func(t *testing.T) {
		if _, err := CMPL(reg.EAX, operand.Imm(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_imm32", func(t *testing.T) {
		if _, err := CMPL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, operand.Imm(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_imm8", func(t *testing.T) {
		if _, err := CMPL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CMPL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_imm32", func(t *testing.T) {
		if _, err := CMPL(reg.R10L, operand.Imm(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_imm8", func(t *testing.T) {
		if _, err := CMPL(reg.R10L, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := CMPL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMPL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_imm8", func(t *testing.T) {
		if _, err := CMPPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_imm8", func(t *testing.T) {
		if _, err := CMPPD(reg.X7, reg.X7, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_imm8", func(t *testing.T) {
		if _, err := CMPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_imm8", func(t *testing.T) {
		if _, err := CMPPS(reg.X7, reg.X7, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPQValidForms(t *testing.T) {
	t.Run("form=m64_imm32", func(t *testing.T) {
		if _, err := CMPQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, operand.Imm(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_imm8", func(t *testing.T) {
		if _, err := CMPQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CMPQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_imm32", func(t *testing.T) {
		if _, err := CMPQ(reg.R11, operand.Imm(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_imm8", func(t *testing.T) {
		if _, err := CMPQ(reg.R11, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := CMPQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMPQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rax_imm32", func(t *testing.T) {
		if _, err := CMPQ(reg.RAX, operand.Imm(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_imm8", func(t *testing.T) {
		if _, err := CMPSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_imm8", func(t *testing.T) {
		if _, err := CMPSD(reg.X7, reg.X7, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_imm8", func(t *testing.T) {
		if _, err := CMPSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_imm8", func(t *testing.T) {
		if _, err := CMPSS(reg.X7, reg.X7, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPWValidForms(t *testing.T) {
	t.Run("form=ax_imm16", func(t *testing.T) {
		if _, err := CMPW(reg.AX, operand.Imm(math.MaxInt16)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_imm16", func(t *testing.T) {
		if _, err := CMPW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, operand.Imm(math.MaxInt16)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_imm8", func(t *testing.T) {
		if _, err := CMPW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := CMPW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_imm16", func(t *testing.T) {
		if _, err := CMPW(reg.CX, operand.Imm(math.MaxInt16)); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPW(reg.R9W, operand.Imm(math.MaxInt16)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_imm8", func(t *testing.T) {
		if _, err := CMPW(reg.CX, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPW(reg.R9W, operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := CMPW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMPW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPXCHG16BValidForms(t *testing.T) {
	t.Run("form=m128", func(t *testing.T) {
		if _, err := CMPXCHG16B(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPXCHG8BValidForms(t *testing.T) {
	t.Run("form=m64", func(t *testing.T) {
		if _, err := CMPXCHG8B(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPXCHGBValidForms(t *testing.T) {
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := CMPXCHGB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := CMPXCHGB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPXCHGLValidForms(t *testing.T) {
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := CMPXCHGL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CMPXCHGL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPXCHGQValidForms(t *testing.T) {
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := CMPXCHGQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CMPXCHGQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCMPXCHGWValidForms(t *testing.T) {
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := CMPXCHGW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := CMPXCHGW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := CMPXCHGW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCOMISDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := COMISD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := COMISD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCOMISSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := COMISS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := COMISS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCPUIDValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CPUID(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCQOValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CQO(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCRC32BValidForms(t *testing.T) {
	t.Run("form=m8_r32", func(t *testing.T) {
		if _, err := CRC32B(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r64", func(t *testing.T) {
		if _, err := CRC32B(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r32", func(t *testing.T) {
		if _, err := CRC32B(reg.CH, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := CRC32B(reg.BL, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := CRC32B(reg.R13B, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r64", func(t *testing.T) {
		if _, err := CRC32B(reg.CH, reg.R11); err != nil {
			t.Fatal(err)
		}
		if _, err := CRC32B(reg.BL, reg.R11); err != nil {
			t.Fatal(err)
		}
		if _, err := CRC32B(reg.R13B, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCRC32LValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CRC32L(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := CRC32L(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCRC32QValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CRC32Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := CRC32Q(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCRC32WValidForms(t *testing.T) {
	t.Run("form=m16_r32", func(t *testing.T) {
		if _, err := CRC32W(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r32", func(t *testing.T) {
		if _, err := CRC32W(reg.CX, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := CRC32W(reg.R9W, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTPD2PLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := CVTPD2PL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTPD2PL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTPD2PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := CVTPD2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTPD2PS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTPL2PDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := CVTPL2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTPL2PD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTPL2PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := CVTPL2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTPL2PS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTPS2PDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := CVTPS2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTPS2PD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTPS2PLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := CVTPS2PL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTPS2PL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTSD2SLValidForms(t *testing.T) {
	t.Run("form=m64_r32", func(t *testing.T) {
		if _, err := CVTSD2SL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CVTSD2SL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := CVTSD2SL(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := CVTSD2SL(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTSD2SSValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := CVTSD2SS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTSD2SS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTSL2SDValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := CVTSL2SD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm", func(t *testing.T) {
		if _, err := CVTSL2SD(reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTSL2SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := CVTSL2SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm", func(t *testing.T) {
		if _, err := CVTSL2SS(reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTSQ2SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := CVTSQ2SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm", func(t *testing.T) {
		if _, err := CVTSQ2SD(reg.R11, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTSQ2SSValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := CVTSQ2SS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm", func(t *testing.T) {
		if _, err := CVTSQ2SS(reg.R11, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTSS2SDValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := CVTSS2SD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTSS2SD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTSS2SLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CVTSS2SL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r64", func(t *testing.T) {
		if _, err := CVTSS2SL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := CVTSS2SL(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := CVTSS2SL(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTTPD2PLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := CVTTPD2PL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTTPD2PL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTTPS2PLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := CVTTPS2PL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := CVTTPS2PL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTTSD2SLValidForms(t *testing.T) {
	t.Run("form=m64_r32", func(t *testing.T) {
		if _, err := CVTTSD2SL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := CVTTSD2SL(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTTSD2SQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := CVTTSD2SQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := CVTTSD2SQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCVTTSS2SLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := CVTTSS2SL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r64", func(t *testing.T) {
		if _, err := CVTTSS2SL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := CVTTSS2SL(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := CVTTSS2SL(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCWDValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CWD(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestCWDEValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := CWDE(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDECBValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := DECB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := DECB(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := DECB(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := DECB(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDECLValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := DECL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := DECL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDECQValidForms(t *testing.T) {
	t.Run("form=m64", func(t *testing.T) {
		if _, err := DECQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := DECQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDECWValidForms(t *testing.T) {
	t.Run("form=m16", func(t *testing.T) {
		if _, err := DECW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := DECW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := DECW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDIVBValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := DIVB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := DIVB(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := DIVB(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := DIVB(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDIVLValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := DIVL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := DIVL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDIVPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := DIVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := DIVPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDIVPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := DIVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := DIVPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDIVQValidForms(t *testing.T) {
	t.Run("form=m64", func(t *testing.T) {
		if _, err := DIVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := DIVQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDIVSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := DIVSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := DIVSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDIVSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := DIVSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := DIVSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDIVWValidForms(t *testing.T) {
	t.Run("form=m16", func(t *testing.T) {
		if _, err := DIVW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := DIVW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := DIVW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDPPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := DPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := DPPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestDPPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := DPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := DPPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestEXTRACTPSValidForms(t *testing.T) {
	t.Run("form=imm2u_xmm_m32", func(t *testing.T) {
		if _, err := EXTRACTPS(operand.Imm(1), reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
		if _, err := EXTRACTPS(operand.Imm(3), reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm2u_xmm_r32", func(t *testing.T) {
		if _, err := EXTRACTPS(operand.Imm(1), reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := EXTRACTPS(operand.Imm(3), reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestHADDPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := HADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := HADDPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestHADDPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := HADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := HADDPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestHSUBPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := HSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := HSUBPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestHSUBPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := HSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := HSUBPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIDIVBValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := IDIVB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := IDIVB(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := IDIVB(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := IDIVB(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIDIVLValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := IDIVL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := IDIVL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIDIVQValidForms(t *testing.T) {
	t.Run("form=m64", func(t *testing.T) {
		if _, err := IDIVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := IDIVQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIDIVWValidForms(t *testing.T) {
	t.Run("form=m16", func(t *testing.T) {
		if _, err := IDIVW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := IDIVW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IDIVW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIMUL3LValidForms(t *testing.T) {
	t.Run("form=imm32_m32_r32", func(t *testing.T) {
		if _, err := IMUL3L(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32_r32", func(t *testing.T) {
		if _, err := IMUL3L(operand.Imm(math.MaxInt32), reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32_r32", func(t *testing.T) {
		if _, err := IMUL3L(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_r32", func(t *testing.T) {
		if _, err := IMUL3L(operand.Imm(math.MaxInt8), reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIMUL3QValidForms(t *testing.T) {
	t.Run("form=imm32_m64_r64", func(t *testing.T) {
		if _, err := IMUL3Q(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64_r64", func(t *testing.T) {
		if _, err := IMUL3Q(operand.Imm(math.MaxInt32), reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64_r64", func(t *testing.T) {
		if _, err := IMUL3Q(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64_r64", func(t *testing.T) {
		if _, err := IMUL3Q(operand.Imm(math.MaxInt8), reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIMUL3WValidForms(t *testing.T) {
	t.Run("form=imm16_m16_r16", func(t *testing.T) {
		if _, err := IMUL3W(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMUL3W(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16_r16", func(t *testing.T) {
		if _, err := IMUL3W(operand.Imm(math.MaxInt16), reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMUL3W(operand.Imm(math.MaxInt16), reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := IMUL3W(operand.Imm(math.MaxInt16), reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMUL3W(operand.Imm(math.MaxInt16), reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16_r16", func(t *testing.T) {
		if _, err := IMUL3W(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMUL3W(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16_r16", func(t *testing.T) {
		if _, err := IMUL3W(operand.Imm(math.MaxInt8), reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMUL3W(operand.Imm(math.MaxInt8), reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := IMUL3W(operand.Imm(math.MaxInt8), reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMUL3W(operand.Imm(math.MaxInt8), reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIMULBValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := IMULB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := IMULB(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := IMULB(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := IMULB(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIMULLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := IMULL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32", func(t *testing.T) {
		if _, err := IMULL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := IMULL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := IMULL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIMULQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := IMULQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64", func(t *testing.T) {
		if _, err := IMULQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := IMULQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := IMULQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestIMULWValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := IMULW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMULW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16", func(t *testing.T) {
		if _, err := IMULW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := IMULW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMULW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := IMULW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMULW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := IMULW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := IMULW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestINCBValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := INCB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := INCB(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := INCB(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := INCB(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestINCLValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := INCL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := INCL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestINCQValidForms(t *testing.T) {
	t.Run("form=m64", func(t *testing.T) {
		if _, err := INCQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := INCQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestINCWValidForms(t *testing.T) {
	t.Run("form=m16", func(t *testing.T) {
		if _, err := INCW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := INCW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := INCW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestINSERTPSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm", func(t *testing.T) {
		if _, err := INSERTPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := INSERTPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestINTValidForms(t *testing.T) {
	t.Run("form=3", func(t *testing.T) {
		if _, err := INT(operand.Imm(3)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8", func(t *testing.T) {
		if _, err := INT(operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJAValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JA(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JA(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JA(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJAEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JAE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JAE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JAE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJBValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JB(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JB(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JB(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJBEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JBE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JBE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JBE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJCValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JC(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JC(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JC(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJCCValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JCC(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JCC(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JCC(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJCSValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JCS(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JCS(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JCS(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJCXZLValidForms(t *testing.T) {
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JCXZL(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJCXZQValidForms(t *testing.T) {
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JCXZQ(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJEQValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JEQ(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JEQ(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JEQ(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJGValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JG(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JG(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JG(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJGEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JGE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JGE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JGE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJGTValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JGT(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JGT(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JGT(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJHIValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JHI(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JHI(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JHI(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJHSValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JHS(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JHS(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JHS(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJLValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JL(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JL(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JL(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJLEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JLE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JLE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JLE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJLOValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JLO(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JLO(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JLO(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJLSValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JLS(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JLS(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JLS(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJLTValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JLT(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JLT(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JLT(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJMIValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JMI(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JMI(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JMI(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJMPValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JMP(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JMP(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JMP(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64", func(t *testing.T) {
		if _, err := JMP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := JMP(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNAValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNA(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNA(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNA(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNAEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNAE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNAE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNAE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNBValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNB(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNB(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNB(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNBEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNBE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNBE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNBE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNCValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNC(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNC(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNC(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNGValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNG(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNG(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNG(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNGEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNGE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNGE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNGE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNLValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNL(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNL(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNL(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNLEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNLE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNLE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNLE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNOValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNO(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNO(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNO(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNPValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNP(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNP(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNP(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNSValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNS(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNS(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNS(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJNZValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JNZ(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JNZ(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JNZ(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJOValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JO(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JO(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JO(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJOCValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JOC(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JOC(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JOC(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJOSValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JOS(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JOS(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JOS(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJPValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JP(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JP(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JP(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJPCValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JPC(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JPC(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JPC(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJPEValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JPE(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JPE(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JPE(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJPLValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JPL(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JPL(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JPL(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJPOValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JPO(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JPO(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JPO(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJPSValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JPS(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JPS(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JPS(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJSValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JS(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JS(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JS(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestJZValidForms(t *testing.T) {
	t.Run("form=rel32", func(t *testing.T) {
		if _, err := JZ(operand.Rel(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
		if _, err := JZ(operand.LabelRef("lbl")); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rel8", func(t *testing.T) {
		if _, err := JZ(operand.Rel(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKADDBValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KADDB(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKADDDValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KADDD(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKADDQValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KADDQ(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKADDWValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KADDW(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKANDBValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KANDB(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKANDDValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KANDD(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKANDNBValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KANDNB(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKANDNDValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KANDND(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKANDNQValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KANDNQ(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKANDNWValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KANDNW(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKANDQValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KANDQ(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKANDWValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KANDW(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKMOVBValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KMOVB(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_m8", func(t *testing.T) {
		if _, err := KMOVB(reg.K7, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_r32", func(t *testing.T) {
		if _, err := KMOVB(reg.K7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_k", func(t *testing.T) {
		if _, err := KMOVB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k", func(t *testing.T) {
		if _, err := KMOVB(reg.R10L, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKMOVDValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KMOVD(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_m32", func(t *testing.T) {
		if _, err := KMOVD(reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_r32", func(t *testing.T) {
		if _, err := KMOVD(reg.K7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k", func(t *testing.T) {
		if _, err := KMOVD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k", func(t *testing.T) {
		if _, err := KMOVD(reg.R10L, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKMOVQValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KMOVQ(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_m64", func(t *testing.T) {
		if _, err := KMOVQ(reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_r64", func(t *testing.T) {
		if _, err := KMOVQ(reg.K7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k", func(t *testing.T) {
		if _, err := KMOVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_k", func(t *testing.T) {
		if _, err := KMOVQ(reg.R11, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKMOVWValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KMOVW(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_m16", func(t *testing.T) {
		if _, err := KMOVW(reg.K7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_r32", func(t *testing.T) {
		if _, err := KMOVW(reg.K7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k", func(t *testing.T) {
		if _, err := KMOVW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k", func(t *testing.T) {
		if _, err := KMOVW(reg.R10L, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKNOTBValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KNOTB(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKNOTDValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KNOTD(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKNOTQValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KNOTQ(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKNOTWValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KNOTW(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKORBValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KORB(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKORDValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KORD(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKORQValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KORQ(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKORTESTBValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KORTESTB(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKORTESTDValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KORTESTD(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKORTESTQValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KORTESTQ(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKORTESTWValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KORTESTW(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKORWValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KORW(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKSHIFTLBValidForms(t *testing.T) {
	t.Run("form=imm8_k_k", func(t *testing.T) {
		if _, err := KSHIFTLB(operand.Imm(math.MaxInt8), reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKSHIFTLDValidForms(t *testing.T) {
	t.Run("form=imm8_k_k", func(t *testing.T) {
		if _, err := KSHIFTLD(operand.Imm(math.MaxInt8), reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKSHIFTLQValidForms(t *testing.T) {
	t.Run("form=imm8_k_k", func(t *testing.T) {
		if _, err := KSHIFTLQ(operand.Imm(math.MaxInt8), reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKSHIFTLWValidForms(t *testing.T) {
	t.Run("form=imm8_k_k", func(t *testing.T) {
		if _, err := KSHIFTLW(operand.Imm(math.MaxInt8), reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKSHIFTRBValidForms(t *testing.T) {
	t.Run("form=imm8_k_k", func(t *testing.T) {
		if _, err := KSHIFTRB(operand.Imm(math.MaxInt8), reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKSHIFTRDValidForms(t *testing.T) {
	t.Run("form=imm8_k_k", func(t *testing.T) {
		if _, err := KSHIFTRD(operand.Imm(math.MaxInt8), reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKSHIFTRQValidForms(t *testing.T) {
	t.Run("form=imm8_k_k", func(t *testing.T) {
		if _, err := KSHIFTRQ(operand.Imm(math.MaxInt8), reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKSHIFTRWValidForms(t *testing.T) {
	t.Run("form=imm8_k_k", func(t *testing.T) {
		if _, err := KSHIFTRW(operand.Imm(math.MaxInt8), reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKTESTBValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KTESTB(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKTESTDValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KTESTD(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKTESTQValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KTESTQ(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKTESTWValidForms(t *testing.T) {
	t.Run("form=k_k", func(t *testing.T) {
		if _, err := KTESTW(reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKUNPCKBWValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KUNPCKBW(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKUNPCKDQValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KUNPCKDQ(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKUNPCKWDValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KUNPCKWD(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKXNORBValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KXNORB(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKXNORDValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KXNORD(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKXNORQValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KXNORQ(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKXNORWValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KXNORW(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKXORBValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KXORB(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKXORDValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KXORD(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKXORQValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KXORQ(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestKXORWValidForms(t *testing.T) {
	t.Run("form=k_k_k", func(t *testing.T) {
		if _, err := KXORW(reg.K7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestLDDQUValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := LDDQU(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestLDMXCSRValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := LDMXCSR(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestLEALValidForms(t *testing.T) {
	t.Run("form=m_r32", func(t *testing.T) {
		if _, err := LEAL(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestLEAQValidForms(t *testing.T) {
	t.Run("form=m_r64", func(t *testing.T) {
		if _, err := LEAQ(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestLEAWValidForms(t *testing.T) {
	t.Run("form=m_r16", func(t *testing.T) {
		if _, err := LEAW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := LEAW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestLFENCEValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := LFENCE(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestLZCNTLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := LZCNTL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := LZCNTL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestLZCNTQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := LZCNTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := LZCNTQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestLZCNTWValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := LZCNTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := LZCNTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := LZCNTW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := LZCNTW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := LZCNTW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := LZCNTW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMASKMOVDQUValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MASKMOVDQU(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMASKMOVOUValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MASKMOVOU(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMAXPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MAXPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MAXPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMAXPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MAXPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MAXPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMAXSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MAXSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMAXSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := MAXSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MAXSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMFENCEValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := MFENCE(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMINPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MINPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MINPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMINPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MINPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MINPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMINSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MINSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMINSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := MINSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MINSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMONITORValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := MONITOR(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVAPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVAPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVAPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVAPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVAPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVAPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVAPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVAPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBValidForms(t *testing.T) {
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := MOVB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := MOVB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := MOVB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := MOVB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := MOVB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBELLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := MOVBELL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := MOVBELL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBEQQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := MOVBEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := MOVBEQQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBEWWValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := MOVBEWW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBEWW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := MOVBEWW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBEWW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBLSXValidForms(t *testing.T) {
	t.Run("form=m8_r32", func(t *testing.T) {
		if _, err := MOVBLSX(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r32", func(t *testing.T) {
		if _, err := MOVBLSX(reg.CH, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBLSX(reg.BL, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBLSX(reg.R13B, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBLZXValidForms(t *testing.T) {
	t.Run("form=m8_r32", func(t *testing.T) {
		if _, err := MOVBLZX(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r32", func(t *testing.T) {
		if _, err := MOVBLZX(reg.CH, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBLZX(reg.BL, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBLZX(reg.R13B, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBQSXValidForms(t *testing.T) {
	t.Run("form=m8_r64", func(t *testing.T) {
		if _, err := MOVBQSX(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r64", func(t *testing.T) {
		if _, err := MOVBQSX(reg.CH, reg.R11); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBQSX(reg.BL, reg.R11); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBQSX(reg.R13B, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBQZXValidForms(t *testing.T) {
	t.Run("form=m8_r64", func(t *testing.T) {
		if _, err := MOVBQZX(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r64", func(t *testing.T) {
		if _, err := MOVBQZX(reg.CH, reg.R11); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBQZX(reg.BL, reg.R11); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBQZX(reg.R13B, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBWSXValidForms(t *testing.T) {
	t.Run("form=m8_r16", func(t *testing.T) {
		if _, err := MOVBWSX(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWSX(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r16", func(t *testing.T) {
		if _, err := MOVBWSX(reg.CH, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWSX(reg.CH, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWSX(reg.BL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWSX(reg.BL, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWSX(reg.R13B, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWSX(reg.R13B, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVBWZXValidForms(t *testing.T) {
	t.Run("form=m8_r16", func(t *testing.T) {
		if _, err := MOVBWZX(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWZX(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r16", func(t *testing.T) {
		if _, err := MOVBWZX(reg.CH, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWZX(reg.CH, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWZX(reg.BL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWZX(reg.BL, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWZX(reg.R13B, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVBWZX(reg.R13B, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVDValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := MOVD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MOVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm", func(t *testing.T) {
		if _, err := MOVD(reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm", func(t *testing.T) {
		if _, err := MOVD(reg.R11, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := MOVD(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := MOVD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := MOVD(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := MOVD(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := MOVD(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := MOVD(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm64_r64", func(t *testing.T) {
		if _, err := MOVD(operand.Imm(math.MaxInt64), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := MOVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := MOVD(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := MOVD(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVDDUPValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MOVDDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVDDUP(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVDQ2QValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := MOVDQ2Q(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MOVDQ2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm", func(t *testing.T) {
		if _, err := MOVDQ2Q(reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm", func(t *testing.T) {
		if _, err := MOVDQ2Q(reg.R11, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := MOVDQ2Q(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := MOVDQ2Q(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := MOVDQ2Q(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := MOVDQ2Q(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVDQ2Q(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := MOVDQ2Q(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := MOVDQ2Q(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm64_r64", func(t *testing.T) {
		if _, err := MOVDQ2Q(operand.Imm(math.MaxInt64), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := MOVDQ2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := MOVDQ2Q(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := MOVDQ2Q(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVHLPSValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVHLPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVHPDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MOVHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := MOVHPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVHPSValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MOVHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := MOVHPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVLValidForms(t *testing.T) {
	t.Run("form=imm32_m32", func(t *testing.T) {
		if _, err := MOVL(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32", func(t *testing.T) {
		if _, err := MOVL(operand.Imm(math.MaxInt32), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := MOVL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := MOVL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := MOVL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVLHPSValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVLHPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVLPDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MOVLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := MOVLPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVLPSValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MOVLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := MOVLPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVLQSXValidForms(t *testing.T) {
	t.Run("form=m32_r64", func(t *testing.T) {
		if _, err := MOVLQSX(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r64", func(t *testing.T) {
		if _, err := MOVLQSX(reg.R10L, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVLQZXValidForms(t *testing.T) {
	t.Run("form=m32_r64", func(t *testing.T) {
		if _, err := MOVLQZX(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVMSKPDValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := MOVMSKPD(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVMSKPSValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := MOVMSKPS(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVNTDQValidForms(t *testing.T) {
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVNTDQ(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVNTDQAValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVNTDQA(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVNTILValidForms(t *testing.T) {
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := MOVNTIL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVNTIQValidForms(t *testing.T) {
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := MOVNTIQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVNTOValidForms(t *testing.T) {
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVNTO(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVNTPDValidForms(t *testing.T) {
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVNTPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVNTPSValidForms(t *testing.T) {
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVNTPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVOValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVO(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVO(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVO(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVOAValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVOA(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVOA(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVOA(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVOUValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVOU(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVOU(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVOU(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVQValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := MOVQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MOVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm", func(t *testing.T) {
		if _, err := MOVQ(reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm", func(t *testing.T) {
		if _, err := MOVQ(reg.R11, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := MOVQ(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := MOVQ(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := MOVQ(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := MOVQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := MOVQ(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := MOVQ(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm64_r64", func(t *testing.T) {
		if _, err := MOVQ(operand.Imm(math.MaxInt64), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := MOVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := MOVQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := MOVQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MOVSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := MOVSD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVSHDUPValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVSHDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVSHDUP(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVSLDUPValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVSLDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVSLDUP(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := MOVSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := MOVSS(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVUPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVUPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVUPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVUPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVUPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MOVUPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := MOVUPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MOVUPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVWValidForms(t *testing.T) {
	t.Run("form=imm16_m16", func(t *testing.T) {
		if _, err := MOVW(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16", func(t *testing.T) {
		if _, err := MOVW(operand.Imm(math.MaxInt16), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVW(operand.Imm(math.MaxInt16), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := MOVW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := MOVW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := MOVW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVWLSXValidForms(t *testing.T) {
	t.Run("form=m16_r32", func(t *testing.T) {
		if _, err := MOVWLSX(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r32", func(t *testing.T) {
		if _, err := MOVWLSX(reg.CX, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVWLSX(reg.R9W, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVWLZXValidForms(t *testing.T) {
	t.Run("form=m16_r32", func(t *testing.T) {
		if _, err := MOVWLZX(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r32", func(t *testing.T) {
		if _, err := MOVWLZX(reg.CX, reg.R10L); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVWLZX(reg.R9W, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVWQSXValidForms(t *testing.T) {
	t.Run("form=m16_r64", func(t *testing.T) {
		if _, err := MOVWQSX(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r64", func(t *testing.T) {
		if _, err := MOVWQSX(reg.CX, reg.R11); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVWQSX(reg.R9W, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMOVWQZXValidForms(t *testing.T) {
	t.Run("form=m16_r64", func(t *testing.T) {
		if _, err := MOVWQZX(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r64", func(t *testing.T) {
		if _, err := MOVWQZX(reg.CX, reg.R11); err != nil {
			t.Fatal(err)
		}
		if _, err := MOVWQZX(reg.R9W, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMPSADBWValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := MPSADBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := MPSADBW(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULBValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := MULB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := MULB(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := MULB(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := MULB(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULLValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := MULL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := MULL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MULPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MULPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := MULPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MULPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULQValidForms(t *testing.T) {
	t.Run("form=m64", func(t *testing.T) {
		if _, err := MULQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := MULQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := MULSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MULSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := MULSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := MULSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULWValidForms(t *testing.T) {
	t.Run("form=m16", func(t *testing.T) {
		if _, err := MULW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := MULW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := MULW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULXLValidForms(t *testing.T) {
	t.Run("form=m32_r32_r32", func(t *testing.T) {
		if _, err := MULXL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32_r32", func(t *testing.T) {
		if _, err := MULXL(reg.R10L, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMULXQValidForms(t *testing.T) {
	t.Run("form=m64_r64_r64", func(t *testing.T) {
		if _, err := MULXQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64_r64", func(t *testing.T) {
		if _, err := MULXQ(reg.R11, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestMWAITValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := MWAIT(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestNEGBValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := NEGB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := NEGB(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := NEGB(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := NEGB(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestNEGLValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := NEGL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := NEGL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestNEGQValidForms(t *testing.T) {
	t.Run("form=m64", func(t *testing.T) {
		if _, err := NEGQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := NEGQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestNEGWValidForms(t *testing.T) {
	t.Run("form=m16", func(t *testing.T) {
		if _, err := NEGW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := NEGW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := NEGW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestNOPValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := NOP(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestNOTBValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := NOTB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := NOTB(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := NOTB(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := NOTB(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestNOTLValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := NOTL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := NOTL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestNOTQValidForms(t *testing.T) {
	t.Run("form=m64", func(t *testing.T) {
		if _, err := NOTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := NOTQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestNOTWValidForms(t *testing.T) {
	t.Run("form=m16", func(t *testing.T) {
		if _, err := NOTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := NOTW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := NOTW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestORBValidForms(t *testing.T) {
	t.Run("form=imm8_al", func(t *testing.T) {
		if _, err := ORB(operand.Imm(math.MaxInt8), reg.AL); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := ORB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := ORB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := ORB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := ORB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := ORB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ORB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestORLValidForms(t *testing.T) {
	t.Run("form=imm32_eax", func(t *testing.T) {
		if _, err := ORL(operand.Imm(math.MaxInt32), reg.EAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m32", func(t *testing.T) {
		if _, err := ORL(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32", func(t *testing.T) {
		if _, err := ORL(operand.Imm(math.MaxInt32), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := ORL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := ORL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := ORL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := ORL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := ORL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestORPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ORPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestORPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := ORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := ORPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestORQValidForms(t *testing.T) {
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := ORQ(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := ORQ(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_rax", func(t *testing.T) {
		if _, err := ORQ(operand.Imm(math.MaxInt32), reg.RAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := ORQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := ORQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := ORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := ORQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := ORQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestORWValidForms(t *testing.T) {
	t.Run("form=imm16_ax", func(t *testing.T) {
		if _, err := ORW(operand.Imm(math.MaxInt16), reg.AX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_m16", func(t *testing.T) {
		if _, err := ORW(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16", func(t *testing.T) {
		if _, err := ORW(operand.Imm(math.MaxInt16), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ORW(operand.Imm(math.MaxInt16), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := ORW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := ORW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ORW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := ORW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ORW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := ORW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := ORW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := ORW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ORW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := ORW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ORW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPABSBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PABSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PABSB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPABSDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PABSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PABSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPABSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PABSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PABSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPACKSSLWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PACKSSLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PACKSSLW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPACKSSWBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PACKSSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PACKSSWB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPACKUSDWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PACKUSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PACKUSDW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPACKUSWBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PACKUSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PACKUSWB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPADDBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PADDB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PADDB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPADDDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PADDD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPADDLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PADDL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PADDL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPADDQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PADDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPADDSBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PADDSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PADDSB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPADDSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PADDSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPADDUSBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PADDUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PADDUSB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPADDUSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PADDUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PADDUSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPADDWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PADDW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPALIGNRValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PALIGNR(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PALIGNR(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPANDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PAND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PAND(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPANDNValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PANDN(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PANDN(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPAUSEValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := PAUSE(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPAVGBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PAVGB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PAVGB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPAVGWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PAVGW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PAVGW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPBLENDVBValidForms(t *testing.T) {
	t.Run("form=xmm0_m128_xmm", func(t *testing.T) {
		if _, err := PBLENDVB(reg.X0, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm0_xmm_xmm", func(t *testing.T) {
		if _, err := PBLENDVB(reg.X0, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPBLENDWValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PBLENDW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PBLENDW(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCLMULQDQValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PCLMULQDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PCLMULQDQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPEQBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PCMPEQB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PCMPEQB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPEQLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PCMPEQL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PCMPEQL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPEQQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PCMPEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PCMPEQQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPEQWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PCMPEQW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PCMPEQW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPESTRIValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PCMPESTRI(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PCMPESTRI(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPESTRMValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PCMPESTRM(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PCMPESTRM(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPGTBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PCMPGTB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PCMPGTB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPGTLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PCMPGTL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PCMPGTL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPGTQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PCMPGTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PCMPGTQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPGTWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PCMPGTW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PCMPGTW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPISTRIValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PCMPISTRI(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PCMPISTRI(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPCMPISTRMValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PCMPISTRM(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PCMPISTRM(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPDEPLValidForms(t *testing.T) {
	t.Run("form=m32_r32_r32", func(t *testing.T) {
		if _, err := PDEPL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32_r32", func(t *testing.T) {
		if _, err := PDEPL(reg.R10L, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPDEPQValidForms(t *testing.T) {
	t.Run("form=m64_r64_r64", func(t *testing.T) {
		if _, err := PDEPQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64_r64", func(t *testing.T) {
		if _, err := PDEPQ(reg.R11, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPEXTLValidForms(t *testing.T) {
	t.Run("form=m32_r32_r32", func(t *testing.T) {
		if _, err := PEXTL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32_r32", func(t *testing.T) {
		if _, err := PEXTL(reg.R10L, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPEXTQValidForms(t *testing.T) {
	t.Run("form=m64_r64_r64", func(t *testing.T) {
		if _, err := PEXTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64_r64", func(t *testing.T) {
		if _, err := PEXTQ(reg.R11, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPEXTRBValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m8", func(t *testing.T) {
		if _, err := PEXTRB(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_r32", func(t *testing.T) {
		if _, err := PEXTRB(operand.Imm(math.MaxInt8), reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPEXTRDValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m32", func(t *testing.T) {
		if _, err := PEXTRD(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_r32", func(t *testing.T) {
		if _, err := PEXTRD(operand.Imm(math.MaxInt8), reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPEXTRQValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m64", func(t *testing.T) {
		if _, err := PEXTRQ(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_r64", func(t *testing.T) {
		if _, err := PEXTRQ(operand.Imm(math.MaxInt8), reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPEXTRWValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m16", func(t *testing.T) {
		if _, err := PEXTRW(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_r32", func(t *testing.T) {
		if _, err := PEXTRW(operand.Imm(math.MaxInt8), reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPHADDDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PHADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PHADDD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPHADDSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PHADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PHADDSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPHADDWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PHADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PHADDW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPHMINPOSUWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PHMINPOSUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PHMINPOSUW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPHSUBDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PHSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PHSUBD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPHSUBSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PHSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PHSUBSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPHSUBWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PHSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PHSUBW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPINSRBValidForms(t *testing.T) {
	t.Run("form=imm8_m8_xmm", func(t *testing.T) {
		if _, err := PINSRB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_xmm", func(t *testing.T) {
		if _, err := PINSRB(operand.Imm(math.MaxInt8), reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPINSRDValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm", func(t *testing.T) {
		if _, err := PINSRD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_xmm", func(t *testing.T) {
		if _, err := PINSRD(operand.Imm(math.MaxInt8), reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPINSRQValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm", func(t *testing.T) {
		if _, err := PINSRQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64_xmm", func(t *testing.T) {
		if _, err := PINSRQ(operand.Imm(math.MaxInt8), reg.R11, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPINSRWValidForms(t *testing.T) {
	t.Run("form=imm8_m16_xmm", func(t *testing.T) {
		if _, err := PINSRW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_xmm", func(t *testing.T) {
		if _, err := PINSRW(operand.Imm(math.MaxInt8), reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMADDUBSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMADDUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMADDUBSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMADDWLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMADDWL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMADDWL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMAXSBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMAXSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMAXSB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMAXSDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMAXSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMAXSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMAXSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMAXSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMAXUBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMAXUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMAXUB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMAXUDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMAXUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMAXUD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMAXUWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMAXUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMAXUW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMINSBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMINSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMINSB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMINSDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMINSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMINSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMINSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMINSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMINUBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMINUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMINUB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMINUDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMINUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMINUD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMINUWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMINUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMINUW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVMSKBValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := PMOVMSKB(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVSXBDValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := PMOVSXBD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVSXBD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVSXBQValidForms(t *testing.T) {
	t.Run("form=m16_xmm", func(t *testing.T) {
		if _, err := PMOVSXBQ(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVSXBQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVSXBWValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := PMOVSXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVSXBW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVSXDQValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := PMOVSXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVSXDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVSXWDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := PMOVSXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVSXWD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVSXWQValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := PMOVSXWQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVSXWQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVZXBDValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := PMOVZXBD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVZXBD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVZXBQValidForms(t *testing.T) {
	t.Run("form=m16_xmm", func(t *testing.T) {
		if _, err := PMOVZXBQ(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVZXBQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVZXBWValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := PMOVZXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVZXBW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVZXDQValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := PMOVZXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVZXDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVZXWDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := PMOVZXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVZXWD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMOVZXWQValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := PMOVZXWQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMOVZXWQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMULDQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMULDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMULDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMULHRSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMULHRSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMULHRSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMULHUWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMULHUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMULHUW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMULHWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMULHW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMULHW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMULLDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMULLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMULLD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMULLWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMULLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMULLW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPMULULQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PMULULQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PMULULQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPOPCNTLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := POPCNTL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := POPCNTL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPOPCNTQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := POPCNTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := POPCNTQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPOPCNTWValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := POPCNTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := POPCNTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := POPCNTW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := POPCNTW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := POPCNTW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := POPCNTW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPOPQValidForms(t *testing.T) {
	t.Run("form=m64", func(t *testing.T) {
		if _, err := POPQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := POPQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPOPWValidForms(t *testing.T) {
	t.Run("form=m16", func(t *testing.T) {
		if _, err := POPW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := POPW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := POPW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPORValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := POR(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := POR(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPREFETCHNTAValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := PREFETCHNTA(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPREFETCHT0ValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := PREFETCHT0(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPREFETCHT1ValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := PREFETCHT1(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPREFETCHT2ValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := PREFETCHT2(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSADBWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSADBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSADBW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSHUFBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSHUFB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSHUFB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSHUFDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PSHUFD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PSHUFD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSHUFHWValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PSHUFHW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PSHUFHW(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSHUFLValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PSHUFL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PSHUFL(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSHUFLWValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := PSHUFLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := PSHUFLW(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSIGNBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSIGNB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSIGNB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSIGNDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSIGND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSIGND(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSIGNWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSIGNW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSIGNW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSLLDQValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSLLDQ(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSLLLValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSLLL(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSLLL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSLLL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSLLOValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSLLO(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSLLQValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSLLQ(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSLLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSLLQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSLLWValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSLLW(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSLLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSLLW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSRALValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSRAL(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSRAL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSRAL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSRAWValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSRAW(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSRAW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSRAW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSRLDQValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSRLDQ(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSRLLValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSRLL(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSRLL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSRLL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSRLOValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSRLO(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSRLQValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSRLQ(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSRLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSRLQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSRLWValidForms(t *testing.T) {
	t.Run("form=imm8_xmm", func(t *testing.T) {
		if _, err := PSRLW(operand.Imm(math.MaxInt8), reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSRLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSRLW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSUBBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSUBB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSUBB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSUBLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSUBL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSUBL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSUBQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSUBQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSUBSBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSUBSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSUBSB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSUBSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSUBSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSUBUSBValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSUBUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSUBUSB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSUBUSWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSUBUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSUBUSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPSUBWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PSUBW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPTESTValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PTEST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PTEST(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUNPCKHBWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PUNPCKHBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PUNPCKHBW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUNPCKHLQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PUNPCKHLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PUNPCKHLQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUNPCKHQDQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PUNPCKHQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PUNPCKHQDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUNPCKHWLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PUNPCKHWL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PUNPCKHWL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUNPCKLBWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PUNPCKLBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PUNPCKLBW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUNPCKLLQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PUNPCKLLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PUNPCKLLQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUNPCKLQDQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PUNPCKLQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PUNPCKLQDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUNPCKLWLValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PUNPCKLWL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PUNPCKLWL(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUSHQValidForms(t *testing.T) {
	t.Run("form=imm32", func(t *testing.T) {
		if _, err := PUSHQ(operand.Imm(math.MaxInt32)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8", func(t *testing.T) {
		if _, err := PUSHQ(operand.Imm(math.MaxInt8)); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64", func(t *testing.T) {
		if _, err := PUSHQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := PUSHQ(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPUSHWValidForms(t *testing.T) {
	t.Run("form=m16", func(t *testing.T) {
		if _, err := PUSHW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16", func(t *testing.T) {
		if _, err := PUSHW(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := PUSHW(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestPXORValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := PXOR(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := PXOR(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCLBValidForms(t *testing.T) {
	t.Run("form=1_m8", func(t *testing.T) {
		if _, err := RCLB(operand.Imm(1), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r8", func(t *testing.T) {
		if _, err := RCLB(operand.Imm(1), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := RCLB(operand.Imm(1), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := RCLB(operand.Imm(1), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m8", func(t *testing.T) {
		if _, err := RCLB(reg.CL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r8", func(t *testing.T) {
		if _, err := RCLB(reg.CL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := RCLB(reg.CL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := RCLB(reg.CL, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := RCLB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := RCLB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := RCLB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := RCLB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCLLValidForms(t *testing.T) {
	t.Run("form=1_m32", func(t *testing.T) {
		if _, err := RCLL(operand.Imm(1), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r32", func(t *testing.T) {
		if _, err := RCLL(operand.Imm(1), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m32", func(t *testing.T) {
		if _, err := RCLL(reg.CL, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32", func(t *testing.T) {
		if _, err := RCLL(reg.CL, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := RCLL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := RCLL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCLQValidForms(t *testing.T) {
	t.Run("form=1_m64", func(t *testing.T) {
		if _, err := RCLQ(operand.Imm(1), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r64", func(t *testing.T) {
		if _, err := RCLQ(operand.Imm(1), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m64", func(t *testing.T) {
		if _, err := RCLQ(reg.CL, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64", func(t *testing.T) {
		if _, err := RCLQ(reg.CL, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := RCLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := RCLQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCLWValidForms(t *testing.T) {
	t.Run("form=1_m16", func(t *testing.T) {
		if _, err := RCLW(operand.Imm(1), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r16", func(t *testing.T) {
		if _, err := RCLW(operand.Imm(1), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RCLW(operand.Imm(1), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m16", func(t *testing.T) {
		if _, err := RCLW(reg.CL, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16", func(t *testing.T) {
		if _, err := RCLW(reg.CL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RCLW(reg.CL, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := RCLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := RCLW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RCLW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCPPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := RCPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := RCPPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCPSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := RCPSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := RCPSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCRBValidForms(t *testing.T) {
	t.Run("form=1_m8", func(t *testing.T) {
		if _, err := RCRB(operand.Imm(1), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r8", func(t *testing.T) {
		if _, err := RCRB(operand.Imm(1), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := RCRB(operand.Imm(1), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := RCRB(operand.Imm(1), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m8", func(t *testing.T) {
		if _, err := RCRB(reg.CL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r8", func(t *testing.T) {
		if _, err := RCRB(reg.CL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := RCRB(reg.CL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := RCRB(reg.CL, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := RCRB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := RCRB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := RCRB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := RCRB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCRLValidForms(t *testing.T) {
	t.Run("form=1_m32", func(t *testing.T) {
		if _, err := RCRL(operand.Imm(1), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r32", func(t *testing.T) {
		if _, err := RCRL(operand.Imm(1), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m32", func(t *testing.T) {
		if _, err := RCRL(reg.CL, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32", func(t *testing.T) {
		if _, err := RCRL(reg.CL, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := RCRL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := RCRL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCRQValidForms(t *testing.T) {
	t.Run("form=1_m64", func(t *testing.T) {
		if _, err := RCRQ(operand.Imm(1), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r64", func(t *testing.T) {
		if _, err := RCRQ(operand.Imm(1), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m64", func(t *testing.T) {
		if _, err := RCRQ(reg.CL, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64", func(t *testing.T) {
		if _, err := RCRQ(reg.CL, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := RCRQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := RCRQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRCRWValidForms(t *testing.T) {
	t.Run("form=1_m16", func(t *testing.T) {
		if _, err := RCRW(operand.Imm(1), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r16", func(t *testing.T) {
		if _, err := RCRW(operand.Imm(1), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RCRW(operand.Imm(1), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m16", func(t *testing.T) {
		if _, err := RCRW(reg.CL, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16", func(t *testing.T) {
		if _, err := RCRW(reg.CL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RCRW(reg.CL, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := RCRW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := RCRW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RCRW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRDRANDLValidForms(t *testing.T) {
	t.Run("form=r16", func(t *testing.T) {
		if _, err := RDRANDL(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RDRANDL(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := RDRANDL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := RDRANDL(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRDSEEDLValidForms(t *testing.T) {
	t.Run("form=r16", func(t *testing.T) {
		if _, err := RDSEEDL(reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RDSEEDL(reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32", func(t *testing.T) {
		if _, err := RDSEEDL(reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64", func(t *testing.T) {
		if _, err := RDSEEDL(reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRDTSCValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := RDTSC(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRDTSCPValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := RDTSCP(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRETValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := RET(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRETFLValidForms(t *testing.T) {
	t.Run("form=imm16", func(t *testing.T) {
		if _, err := RETFL(operand.Imm(math.MaxInt16)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRETFQValidForms(t *testing.T) {
	t.Run("form=imm16", func(t *testing.T) {
		if _, err := RETFQ(operand.Imm(math.MaxInt16)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRETFWValidForms(t *testing.T) {
	t.Run("form=imm16", func(t *testing.T) {
		if _, err := RETFW(operand.Imm(math.MaxInt16)); err != nil {
			t.Fatal(err)
		}
	})
}

func TestROLBValidForms(t *testing.T) {
	t.Run("form=1_m8", func(t *testing.T) {
		if _, err := ROLB(operand.Imm(1), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r8", func(t *testing.T) {
		if _, err := ROLB(operand.Imm(1), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ROLB(operand.Imm(1), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ROLB(operand.Imm(1), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m8", func(t *testing.T) {
		if _, err := ROLB(reg.CL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r8", func(t *testing.T) {
		if _, err := ROLB(reg.CL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ROLB(reg.CL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ROLB(reg.CL, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := ROLB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := ROLB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := ROLB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := ROLB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestROLLValidForms(t *testing.T) {
	t.Run("form=1_m32", func(t *testing.T) {
		if _, err := ROLL(operand.Imm(1), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r32", func(t *testing.T) {
		if _, err := ROLL(operand.Imm(1), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m32", func(t *testing.T) {
		if _, err := ROLL(reg.CL, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32", func(t *testing.T) {
		if _, err := ROLL(reg.CL, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := ROLL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := ROLL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestROLQValidForms(t *testing.T) {
	t.Run("form=1_m64", func(t *testing.T) {
		if _, err := ROLQ(operand.Imm(1), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r64", func(t *testing.T) {
		if _, err := ROLQ(operand.Imm(1), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m64", func(t *testing.T) {
		if _, err := ROLQ(reg.CL, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64", func(t *testing.T) {
		if _, err := ROLQ(reg.CL, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := ROLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := ROLQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestROLWValidForms(t *testing.T) {
	t.Run("form=1_m16", func(t *testing.T) {
		if _, err := ROLW(operand.Imm(1), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r16", func(t *testing.T) {
		if _, err := ROLW(operand.Imm(1), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ROLW(operand.Imm(1), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m16", func(t *testing.T) {
		if _, err := ROLW(reg.CL, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16", func(t *testing.T) {
		if _, err := ROLW(reg.CL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ROLW(reg.CL, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := ROLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := ROLW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := ROLW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRORBValidForms(t *testing.T) {
	t.Run("form=1_m8", func(t *testing.T) {
		if _, err := RORB(operand.Imm(1), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r8", func(t *testing.T) {
		if _, err := RORB(operand.Imm(1), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := RORB(operand.Imm(1), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := RORB(operand.Imm(1), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m8", func(t *testing.T) {
		if _, err := RORB(reg.CL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r8", func(t *testing.T) {
		if _, err := RORB(reg.CL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := RORB(reg.CL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := RORB(reg.CL, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := RORB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := RORB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := RORB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := RORB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRORLValidForms(t *testing.T) {
	t.Run("form=1_m32", func(t *testing.T) {
		if _, err := RORL(operand.Imm(1), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r32", func(t *testing.T) {
		if _, err := RORL(operand.Imm(1), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m32", func(t *testing.T) {
		if _, err := RORL(reg.CL, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32", func(t *testing.T) {
		if _, err := RORL(reg.CL, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := RORL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := RORL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRORQValidForms(t *testing.T) {
	t.Run("form=1_m64", func(t *testing.T) {
		if _, err := RORQ(operand.Imm(1), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r64", func(t *testing.T) {
		if _, err := RORQ(operand.Imm(1), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m64", func(t *testing.T) {
		if _, err := RORQ(reg.CL, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64", func(t *testing.T) {
		if _, err := RORQ(reg.CL, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := RORQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := RORQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRORWValidForms(t *testing.T) {
	t.Run("form=1_m16", func(t *testing.T) {
		if _, err := RORW(operand.Imm(1), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r16", func(t *testing.T) {
		if _, err := RORW(operand.Imm(1), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RORW(operand.Imm(1), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m16", func(t *testing.T) {
		if _, err := RORW(reg.CL, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16", func(t *testing.T) {
		if _, err := RORW(reg.CL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RORW(reg.CL, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := RORW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := RORW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := RORW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRORXLValidForms(t *testing.T) {
	t.Run("form=imm8_m32_r32", func(t *testing.T) {
		if _, err := RORXL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_r32", func(t *testing.T) {
		if _, err := RORXL(operand.Imm(math.MaxInt8), reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRORXQValidForms(t *testing.T) {
	t.Run("form=imm8_m64_r64", func(t *testing.T) {
		if _, err := RORXQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64_r64", func(t *testing.T) {
		if _, err := RORXQ(operand.Imm(math.MaxInt8), reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestROUNDPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := ROUNDPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := ROUNDPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestROUNDPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := ROUNDPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := ROUNDPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestROUNDSDValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm", func(t *testing.T) {
		if _, err := ROUNDSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := ROUNDSD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestROUNDSSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm", func(t *testing.T) {
		if _, err := ROUNDSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := ROUNDSS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRSQRTPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := RSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := RSQRTPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestRSQRTSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := RSQRTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := RSQRTSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSALBValidForms(t *testing.T) {
	t.Run("form=1_m8", func(t *testing.T) {
		if _, err := SALB(operand.Imm(1), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r8", func(t *testing.T) {
		if _, err := SALB(operand.Imm(1), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SALB(operand.Imm(1), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SALB(operand.Imm(1), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m8", func(t *testing.T) {
		if _, err := SALB(reg.CL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r8", func(t *testing.T) {
		if _, err := SALB(reg.CL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SALB(reg.CL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SALB(reg.CL, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := SALB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := SALB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SALB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SALB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSALLValidForms(t *testing.T) {
	t.Run("form=1_m32", func(t *testing.T) {
		if _, err := SALL(operand.Imm(1), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r32", func(t *testing.T) {
		if _, err := SALL(operand.Imm(1), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m32", func(t *testing.T) {
		if _, err := SALL(reg.CL, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32", func(t *testing.T) {
		if _, err := SALL(reg.CL, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := SALL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := SALL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSALQValidForms(t *testing.T) {
	t.Run("form=1_m64", func(t *testing.T) {
		if _, err := SALQ(operand.Imm(1), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r64", func(t *testing.T) {
		if _, err := SALQ(operand.Imm(1), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m64", func(t *testing.T) {
		if _, err := SALQ(reg.CL, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64", func(t *testing.T) {
		if _, err := SALQ(reg.CL, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := SALQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := SALQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSALWValidForms(t *testing.T) {
	t.Run("form=1_m16", func(t *testing.T) {
		if _, err := SALW(operand.Imm(1), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r16", func(t *testing.T) {
		if _, err := SALW(operand.Imm(1), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SALW(operand.Imm(1), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m16", func(t *testing.T) {
		if _, err := SALW(reg.CL, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16", func(t *testing.T) {
		if _, err := SALW(reg.CL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SALW(reg.CL, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := SALW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := SALW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SALW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSARBValidForms(t *testing.T) {
	t.Run("form=1_m8", func(t *testing.T) {
		if _, err := SARB(operand.Imm(1), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r8", func(t *testing.T) {
		if _, err := SARB(operand.Imm(1), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SARB(operand.Imm(1), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SARB(operand.Imm(1), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m8", func(t *testing.T) {
		if _, err := SARB(reg.CL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r8", func(t *testing.T) {
		if _, err := SARB(reg.CL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SARB(reg.CL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SARB(reg.CL, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := SARB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := SARB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SARB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SARB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSARLValidForms(t *testing.T) {
	t.Run("form=1_m32", func(t *testing.T) {
		if _, err := SARL(operand.Imm(1), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r32", func(t *testing.T) {
		if _, err := SARL(operand.Imm(1), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m32", func(t *testing.T) {
		if _, err := SARL(reg.CL, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32", func(t *testing.T) {
		if _, err := SARL(reg.CL, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := SARL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := SARL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSARQValidForms(t *testing.T) {
	t.Run("form=1_m64", func(t *testing.T) {
		if _, err := SARQ(operand.Imm(1), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r64", func(t *testing.T) {
		if _, err := SARQ(operand.Imm(1), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m64", func(t *testing.T) {
		if _, err := SARQ(reg.CL, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64", func(t *testing.T) {
		if _, err := SARQ(reg.CL, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := SARQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := SARQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSARWValidForms(t *testing.T) {
	t.Run("form=1_m16", func(t *testing.T) {
		if _, err := SARW(operand.Imm(1), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r16", func(t *testing.T) {
		if _, err := SARW(operand.Imm(1), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SARW(operand.Imm(1), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m16", func(t *testing.T) {
		if _, err := SARW(reg.CL, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16", func(t *testing.T) {
		if _, err := SARW(reg.CL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SARW(reg.CL, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := SARW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := SARW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SARW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSARXLValidForms(t *testing.T) {
	t.Run("form=r32_m32_r32", func(t *testing.T) {
		if _, err := SARXL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32_r32", func(t *testing.T) {
		if _, err := SARXL(reg.R10L, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSARXQValidForms(t *testing.T) {
	t.Run("form=r64_m64_r64", func(t *testing.T) {
		if _, err := SARXQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64_r64", func(t *testing.T) {
		if _, err := SARXQ(reg.R11, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSBBBValidForms(t *testing.T) {
	t.Run("form=imm8_al", func(t *testing.T) {
		if _, err := SBBB(operand.Imm(math.MaxInt8), reg.AL); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := SBBB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := SBBB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := SBBB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := SBBB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := SBBB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSBBLValidForms(t *testing.T) {
	t.Run("form=imm32_eax", func(t *testing.T) {
		if _, err := SBBL(operand.Imm(math.MaxInt32), reg.EAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m32", func(t *testing.T) {
		if _, err := SBBL(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32", func(t *testing.T) {
		if _, err := SBBL(operand.Imm(math.MaxInt32), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := SBBL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := SBBL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := SBBL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := SBBL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := SBBL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSBBQValidForms(t *testing.T) {
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := SBBQ(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := SBBQ(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_rax", func(t *testing.T) {
		if _, err := SBBQ(operand.Imm(math.MaxInt32), reg.RAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := SBBQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := SBBQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := SBBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := SBBQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := SBBQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSBBWValidForms(t *testing.T) {
	t.Run("form=imm16_ax", func(t *testing.T) {
		if _, err := SBBW(operand.Imm(math.MaxInt16), reg.AX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_m16", func(t *testing.T) {
		if _, err := SBBW(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16", func(t *testing.T) {
		if _, err := SBBW(operand.Imm(math.MaxInt16), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBW(operand.Imm(math.MaxInt16), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := SBBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := SBBW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := SBBW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := SBBW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := SBBW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SBBW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETCCValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETCC(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETCC(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETCC(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETCC(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETCSValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETCS(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETCS(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETCS(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETCS(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETEQValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETEQ(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETEQ(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETEQ(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETEQ(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETGEValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETGE(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETGE(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETGE(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETGE(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETGTValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETGT(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETGT(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETGT(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETGT(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETHIValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETHI(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETHI(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETHI(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETHI(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETLEValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETLE(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETLE(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETLE(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETLE(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETLSValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETLS(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETLS(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETLS(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETLS(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETLTValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETLT(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETLT(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETLT(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETLT(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETMIValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETMI(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETMI(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETMI(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETMI(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETNEValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETNE(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETNE(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETNE(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETNE(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETOCValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETOC(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETOC(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETOC(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETOC(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETOSValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETOS(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETOS(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETOS(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETOS(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETPCValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETPC(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETPC(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETPC(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETPC(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETPLValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETPL(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETPL(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETPL(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETPL(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSETPSValidForms(t *testing.T) {
	t.Run("form=m8", func(t *testing.T) {
		if _, err := SETPS(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8", func(t *testing.T) {
		if _, err := SETPS(reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SETPS(reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SETPS(reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSFENCEValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := SFENCE(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHA1MSG1ValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := SHA1MSG1(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SHA1MSG1(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHA1MSG2ValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := SHA1MSG2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SHA1MSG2(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHA1NEXTEValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := SHA1NEXTE(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SHA1NEXTE(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHA1RNDS4ValidForms(t *testing.T) {
	t.Run("form=imm2u_m128_xmm", func(t *testing.T) {
		if _, err := SHA1RNDS4(operand.Imm(1), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
		if _, err := SHA1RNDS4(operand.Imm(3), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm2u_xmm_xmm", func(t *testing.T) {
		if _, err := SHA1RNDS4(operand.Imm(1), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
		if _, err := SHA1RNDS4(operand.Imm(3), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHA256MSG1ValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := SHA256MSG1(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SHA256MSG1(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHA256MSG2ValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := SHA256MSG2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SHA256MSG2(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHA256RNDS2ValidForms(t *testing.T) {
	t.Run("form=xmm0_m128_xmm", func(t *testing.T) {
		if _, err := SHA256RNDS2(reg.X0, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm0_xmm_xmm", func(t *testing.T) {
		if _, err := SHA256RNDS2(reg.X0, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHLBValidForms(t *testing.T) {
	t.Run("form=1_m8", func(t *testing.T) {
		if _, err := SHLB(operand.Imm(1), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r8", func(t *testing.T) {
		if _, err := SHLB(operand.Imm(1), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLB(operand.Imm(1), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLB(operand.Imm(1), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m8", func(t *testing.T) {
		if _, err := SHLB(reg.CL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r8", func(t *testing.T) {
		if _, err := SHLB(reg.CL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLB(reg.CL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLB(reg.CL, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := SHLB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := SHLB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHLLValidForms(t *testing.T) {
	t.Run("form=1_m32", func(t *testing.T) {
		if _, err := SHLL(operand.Imm(1), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r32", func(t *testing.T) {
		if _, err := SHLL(operand.Imm(1), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m32", func(t *testing.T) {
		if _, err := SHLL(reg.CL, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32", func(t *testing.T) {
		if _, err := SHLL(reg.CL, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32_m32", func(t *testing.T) {
		if _, err := SHLL(reg.CL, reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32_r32", func(t *testing.T) {
		if _, err := SHLL(reg.CL, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := SHLL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := SHLL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_m32", func(t *testing.T) {
		if _, err := SHLL(operand.Imm(math.MaxInt8), reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_r32", func(t *testing.T) {
		if _, err := SHLL(operand.Imm(math.MaxInt8), reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHLQValidForms(t *testing.T) {
	t.Run("form=1_m64", func(t *testing.T) {
		if _, err := SHLQ(operand.Imm(1), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r64", func(t *testing.T) {
		if _, err := SHLQ(operand.Imm(1), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m64", func(t *testing.T) {
		if _, err := SHLQ(reg.CL, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64", func(t *testing.T) {
		if _, err := SHLQ(reg.CL, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64_m64", func(t *testing.T) {
		if _, err := SHLQ(reg.CL, reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64_r64", func(t *testing.T) {
		if _, err := SHLQ(reg.CL, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := SHLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := SHLQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64_m64", func(t *testing.T) {
		if _, err := SHLQ(operand.Imm(math.MaxInt8), reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64_r64", func(t *testing.T) {
		if _, err := SHLQ(operand.Imm(math.MaxInt8), reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHLWValidForms(t *testing.T) {
	t.Run("form=1_m16", func(t *testing.T) {
		if _, err := SHLW(operand.Imm(1), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r16", func(t *testing.T) {
		if _, err := SHLW(operand.Imm(1), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(operand.Imm(1), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m16", func(t *testing.T) {
		if _, err := SHLW(reg.CL, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16", func(t *testing.T) {
		if _, err := SHLW(reg.CL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(reg.CL, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16_m16", func(t *testing.T) {
		if _, err := SHLW(reg.CL, reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(reg.CL, reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16_r16", func(t *testing.T) {
		if _, err := SHLW(reg.CL, reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(reg.CL, reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(reg.CL, reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(reg.CL, reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := SHLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := SHLW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16_m16", func(t *testing.T) {
		if _, err := SHLW(operand.Imm(math.MaxInt8), reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(operand.Imm(math.MaxInt8), reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16_r16", func(t *testing.T) {
		if _, err := SHLW(operand.Imm(math.MaxInt8), reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(operand.Imm(math.MaxInt8), reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(operand.Imm(math.MaxInt8), reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHLW(operand.Imm(math.MaxInt8), reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHLXLValidForms(t *testing.T) {
	t.Run("form=r32_m32_r32", func(t *testing.T) {
		if _, err := SHLXL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32_r32", func(t *testing.T) {
		if _, err := SHLXL(reg.R10L, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHLXQValidForms(t *testing.T) {
	t.Run("form=r64_m64_r64", func(t *testing.T) {
		if _, err := SHLXQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64_r64", func(t *testing.T) {
		if _, err := SHLXQ(reg.R11, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHRBValidForms(t *testing.T) {
	t.Run("form=1_m8", func(t *testing.T) {
		if _, err := SHRB(operand.Imm(1), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r8", func(t *testing.T) {
		if _, err := SHRB(operand.Imm(1), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRB(operand.Imm(1), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRB(operand.Imm(1), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m8", func(t *testing.T) {
		if _, err := SHRB(reg.CL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r8", func(t *testing.T) {
		if _, err := SHRB(reg.CL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRB(reg.CL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRB(reg.CL, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := SHRB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := SHRB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHRLValidForms(t *testing.T) {
	t.Run("form=1_m32", func(t *testing.T) {
		if _, err := SHRL(operand.Imm(1), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r32", func(t *testing.T) {
		if _, err := SHRL(operand.Imm(1), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m32", func(t *testing.T) {
		if _, err := SHRL(reg.CL, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32", func(t *testing.T) {
		if _, err := SHRL(reg.CL, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32_m32", func(t *testing.T) {
		if _, err := SHRL(reg.CL, reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r32_r32", func(t *testing.T) {
		if _, err := SHRL(reg.CL, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := SHRL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := SHRL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_m32", func(t *testing.T) {
		if _, err := SHRL(operand.Imm(math.MaxInt8), reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_r32", func(t *testing.T) {
		if _, err := SHRL(operand.Imm(math.MaxInt8), reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHRQValidForms(t *testing.T) {
	t.Run("form=1_m64", func(t *testing.T) {
		if _, err := SHRQ(operand.Imm(1), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r64", func(t *testing.T) {
		if _, err := SHRQ(operand.Imm(1), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m64", func(t *testing.T) {
		if _, err := SHRQ(reg.CL, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64", func(t *testing.T) {
		if _, err := SHRQ(reg.CL, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64_m64", func(t *testing.T) {
		if _, err := SHRQ(reg.CL, reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r64_r64", func(t *testing.T) {
		if _, err := SHRQ(reg.CL, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := SHRQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := SHRQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64_m64", func(t *testing.T) {
		if _, err := SHRQ(operand.Imm(math.MaxInt8), reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64_r64", func(t *testing.T) {
		if _, err := SHRQ(operand.Imm(math.MaxInt8), reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHRWValidForms(t *testing.T) {
	t.Run("form=1_m16", func(t *testing.T) {
		if _, err := SHRW(operand.Imm(1), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=1_r16", func(t *testing.T) {
		if _, err := SHRW(operand.Imm(1), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(operand.Imm(1), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_m16", func(t *testing.T) {
		if _, err := SHRW(reg.CL, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16", func(t *testing.T) {
		if _, err := SHRW(reg.CL, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(reg.CL, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16_m16", func(t *testing.T) {
		if _, err := SHRW(reg.CL, reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(reg.CL, reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=cl_r16_r16", func(t *testing.T) {
		if _, err := SHRW(reg.CL, reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(reg.CL, reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(reg.CL, reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(reg.CL, reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := SHRW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := SHRW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16_m16", func(t *testing.T) {
		if _, err := SHRW(operand.Imm(math.MaxInt8), reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(operand.Imm(math.MaxInt8), reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16_r16", func(t *testing.T) {
		if _, err := SHRW(operand.Imm(math.MaxInt8), reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(operand.Imm(math.MaxInt8), reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(operand.Imm(math.MaxInt8), reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SHRW(operand.Imm(math.MaxInt8), reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHRXLValidForms(t *testing.T) {
	t.Run("form=r32_m32_r32", func(t *testing.T) {
		if _, err := SHRXL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32_r32", func(t *testing.T) {
		if _, err := SHRXL(reg.R10L, reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHRXQValidForms(t *testing.T) {
	t.Run("form=r64_m64_r64", func(t *testing.T) {
		if _, err := SHRXQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64_r64", func(t *testing.T) {
		if _, err := SHRXQ(reg.R11, reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHUFPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := SHUFPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := SHUFPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSHUFPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := SHUFPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := SHUFPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSQRTPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := SQRTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SQRTPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSQRTPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := SQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SQRTPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSQRTSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := SQRTSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SQRTSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSQRTSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := SQRTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SQRTSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSTCValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := STC(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSTDValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := STD(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSTMXCSRValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := STMXCSR(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSUBBValidForms(t *testing.T) {
	t.Run("form=imm8_al", func(t *testing.T) {
		if _, err := SUBB(operand.Imm(math.MaxInt8), reg.AL); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := SUBB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := SUBB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := SUBB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := SUBB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := SUBB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSUBLValidForms(t *testing.T) {
	t.Run("form=imm32_eax", func(t *testing.T) {
		if _, err := SUBL(operand.Imm(math.MaxInt32), reg.EAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m32", func(t *testing.T) {
		if _, err := SUBL(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32", func(t *testing.T) {
		if _, err := SUBL(operand.Imm(math.MaxInt32), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := SUBL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := SUBL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := SUBL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := SUBL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := SUBL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSUBPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := SUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SUBPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSUBPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := SUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SUBPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSUBQValidForms(t *testing.T) {
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := SUBQ(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := SUBQ(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_rax", func(t *testing.T) {
		if _, err := SUBQ(operand.Imm(math.MaxInt32), reg.RAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := SUBQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := SUBQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := SUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := SUBQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := SUBQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSUBSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := SUBSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SUBSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSUBSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := SUBSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := SUBSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSUBWValidForms(t *testing.T) {
	t.Run("form=imm16_ax", func(t *testing.T) {
		if _, err := SUBW(operand.Imm(math.MaxInt16), reg.AX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_m16", func(t *testing.T) {
		if _, err := SUBW(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16", func(t *testing.T) {
		if _, err := SUBW(operand.Imm(math.MaxInt16), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBW(operand.Imm(math.MaxInt16), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := SUBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := SUBW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := SUBW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := SUBW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := SUBW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := SUBW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestSYSCALLValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := SYSCALL(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestTESTBValidForms(t *testing.T) {
	t.Run("form=imm8_al", func(t *testing.T) {
		if _, err := TESTB(operand.Imm(math.MaxInt8), reg.AL); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := TESTB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := TESTB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := TESTB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := TESTB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestTESTLValidForms(t *testing.T) {
	t.Run("form=imm32_eax", func(t *testing.T) {
		if _, err := TESTL(operand.Imm(math.MaxInt32), reg.EAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m32", func(t *testing.T) {
		if _, err := TESTL(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32", func(t *testing.T) {
		if _, err := TESTL(operand.Imm(math.MaxInt32), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := TESTL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := TESTL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestTESTQValidForms(t *testing.T) {
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := TESTQ(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := TESTQ(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_rax", func(t *testing.T) {
		if _, err := TESTQ(operand.Imm(math.MaxInt32), reg.RAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := TESTQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := TESTQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestTESTWValidForms(t *testing.T) {
	t.Run("form=imm16_ax", func(t *testing.T) {
		if _, err := TESTW(operand.Imm(math.MaxInt16), reg.AX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_m16", func(t *testing.T) {
		if _, err := TESTW(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16", func(t *testing.T) {
		if _, err := TESTW(operand.Imm(math.MaxInt16), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTW(operand.Imm(math.MaxInt16), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := TESTW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := TESTW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := TESTW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestTZCNTLValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := TZCNTL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := TZCNTL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestTZCNTQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := TZCNTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := TZCNTQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestTZCNTWValidForms(t *testing.T) {
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := TZCNTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := TZCNTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := TZCNTW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := TZCNTW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := TZCNTW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := TZCNTW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestUCOMISDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := UCOMISD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := UCOMISD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestUCOMISSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := UCOMISS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := UCOMISS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestUD2ValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := UD2(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestUNPCKHPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := UNPCKHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := UNPCKHPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestUNPCKHPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := UNPCKHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := UNPCKHPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestUNPCKLPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := UNPCKLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := UNPCKLPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestUNPCKLPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := UNPCKLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := UNPCKLPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VADDPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VADDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VADDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VADDPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VADDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VADDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VADDPS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VADDPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VADDPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VADDSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSUBPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VADDSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSUBPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VADDSUBPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVADDSUBPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VADDSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VADDSUBPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VADDSUBPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVAESDECValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VAESDEC(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VAESDEC(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVAESDECLASTValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VAESDECLAST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VAESDECLAST(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVAESENCValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VAESENC(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VAESENC(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVAESENCLASTValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VAESENCLAST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VAESENCLAST(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVAESIMCValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VAESIMC(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VAESIMC(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVAESKEYGENASSISTValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VAESKEYGENASSIST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VAESKEYGENASSIST(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVALIGNDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VALIGND(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVALIGND_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGND_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VALIGND_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGND_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VALIGND_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGND_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VALIGND_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVALIGND_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGND_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGND_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGND_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVALIGND_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGND_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGND_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGND_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGND_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGND_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGND_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVALIGNQValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VALIGNQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVALIGNQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGNQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VALIGNQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGNQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VALIGNQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGNQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VALIGNQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVALIGNQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGNQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGNQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGNQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVALIGNQ_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGNQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VALIGNQ_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGNQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGNQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VALIGNQ_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VALIGNQ_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDNPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VANDNPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VANDNPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VANDNPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VANDNPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VANDNPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VANDNPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VANDNPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VANDNPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDNPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VANDNPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VANDNPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VANDNPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDNPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDNPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDNPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VANDNPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VANDNPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VANDNPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VANDNPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VANDNPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VANDNPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VANDNPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VANDNPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDNPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VANDNPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VANDNPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VANDNPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDNPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDNPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDNPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDNPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDNPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VANDPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VANDPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VANDPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VANDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VANDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VANDPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VANDPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VANDPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VANDPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VANDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VANDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VANDPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVANDPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VANDPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VANDPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VANDPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDMPDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VBLENDMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VBLENDMPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDMPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDMPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDMPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VBLENDMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDMPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDMPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDMPSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VBLENDMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VBLENDMPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDMPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDMPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDMPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VBLENDMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDMPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDMPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VBLENDMPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VBLENDMPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VBLENDMPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDVPDValidForms(t *testing.T) {
	t.Run("form=xmm_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDVPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDVPD(reg.X7, reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDVPD(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDVPD(reg.Y15, reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBLENDVPSValidForms(t *testing.T) {
	t.Run("form=xmm_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDVPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VBLENDVPS(reg.X7, reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDVPS(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VBLENDVPS(reg.Y15, reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF128ValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF128(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF32X2ValidForms(t *testing.T) {
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF32X2_ZValidForms(t *testing.T) {
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF32X2_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF32X4ValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF32X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF32X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF32X4_ZValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X4_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF32X4_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF32X8ValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF32X8_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF32X8_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF64X2ValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF64X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF64X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF64X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF64X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF64X2_ZValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF64X2_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTF64X2_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF64X4ValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF64X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF64X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTF64X4_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTF64X4_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI128ValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI128(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI32X2ValidForms(t *testing.T) {
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI32X2_ZValidForms(t *testing.T) {
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI32X2_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI32X4ValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI32X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI32X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI32X4_ZValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X4_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI32X4_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI32X8ValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI32X8_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI32X8_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI64X2ValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI64X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI64X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI64X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI64X2(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI64X2_ZValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI64X2_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTI64X2_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI64X4ValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI64X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI64X4(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTI64X4_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTI64X4_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTSDValidForms(t *testing.T) {
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSD(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSD(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSD(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSD(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSD_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSD_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTSSValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VBROADCASTSS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSS(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VBROADCASTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSS(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSS(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSS(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVBROADCASTSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VBROADCASTSS_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VBROADCASTSS_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VCMPPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VCMPPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VCMPPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VCMPPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VCMPPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VCMPPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPPD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VCMPPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VCMPPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VCMPPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPPS_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VCMPPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VCMPPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VCMPPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VCMPPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VCMPPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPPS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VCMPPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VCMPPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPSDValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_xmm", func(t *testing.T) {
		if _, err := VCMPSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCMPSD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64_xmm_k", func(t *testing.T) {
		if _, err := VCMPSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPSD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VCMPSD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPSD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPSD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VCMPSD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPSSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_xmm", func(t *testing.T) {
		if _, err := VCMPSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCMPSS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32_xmm_k", func(t *testing.T) {
		if _, err := VCMPSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPSS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VCMPSS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCMPSS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VCMPSS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VCMPSS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCOMISDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VCOMISD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCOMISD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCOMISD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCOMISD_SAE(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCOMISSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VCOMISS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCOMISS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCOMISS_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCOMISS_SAE(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCOMPRESSPDValidForms(t *testing.T) {
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCOMPRESSPD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCOMPRESSPD_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VCOMPRESSPD_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCOMPRESSPD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VCOMPRESSPD_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCOMPRESSPD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VCOMPRESSPD_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCOMPRESSPD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCOMPRESSPSValidForms(t *testing.T) {
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCOMPRESSPS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCOMPRESSPS_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VCOMPRESSPS_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCOMPRESSPS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VCOMPRESSPS_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCOMPRESSPS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VCOMPRESSPS_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCOMPRESSPS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PDValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PD_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PD_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTDQ2PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTDQ2PS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQXValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQX_BCSTValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQX_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQX_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQX_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQYValidForms(t *testing.T) {
	t.Run("form=m256_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQY_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQY_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQY_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2DQY_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RD_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RD_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RD_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RN_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RN_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RN_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RU_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RU_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RU_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RZ_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RZ_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_RZ_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2DQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2DQ_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PSValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PSXValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PSX_BCSTValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PSX_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PSX_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSX_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PSYValidForms(t *testing.T) {
	t.Run("form=m256_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PSY_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PSY_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PSY_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2PSY_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RD_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RD_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RD_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RN_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RN_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RN_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RU_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RU_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RU_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RZ_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RZ_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_RZ_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2PS_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2QQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2QQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2QQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQXValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQX(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQX(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQX_BCSTValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQX_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQX_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQX_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQX_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQX_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQYValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQY(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQY(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQY_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQY_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQY_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQY_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQY_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UDQY_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RD_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RD_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RD_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RN_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RN_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RN_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RU_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RU_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RU_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RZ_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RZ_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_RZ_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UDQ_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPD2UQQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPD2UQQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPH2PSValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VCVTPH2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VCVTPH2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPH2PS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VCVTPH2PS(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VCVTPH2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VCVTPH2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPH2PS(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPH2PS(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VCVTPH2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VCVTPH2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPH2PS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPH2PS(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPH2PS_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPH2PS_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPH2PS_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPH2PS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPH2PS_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPH2PS_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VCVTPH2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPH2PS_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VCVTPH2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VCVTPH2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPH2PS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPH2PS_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2DQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2DQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PDValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PD_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PD_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PD_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PHValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m64", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_m128", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_m256", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_m64", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PH(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PH_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PH_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PH_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PH_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PH_SAE_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2PH_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VCVTPS2PH_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2PH_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_m64", func(t *testing.T) {
		if _, err := VCVTPS2PH_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PH_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VCVTPS2PH_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2PH_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VCVTPS2QQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RD_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RD_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RD_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RN_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RN_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RN_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RU_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RU_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RU_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RZ_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RZ_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_RZ_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2QQ_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2QQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UDQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RD_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RD_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RD_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RN_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RN_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RN_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RU_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RU_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RU_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RZ_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RZ_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_RZ_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTPS2UQQ_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTPS2UQQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PSValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PSXValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSX(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSX(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PSX_BCSTValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PSX_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSX_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PSX_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSX_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSX_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PSYValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSY(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSY(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PSY_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PSY_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSY_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PSY_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSY_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTQQ2PSY_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RD_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RD_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RD_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RN_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RN_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RN_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RU_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RU_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RU_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RZ_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RZ_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_RZ_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTQQ2PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTQQ2PS_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SIValidForms(t *testing.T) {
	t.Run("form=m64_r32", func(t *testing.T) {
		if _, err := VCVTSD2SI(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2SI(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SIQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := VCVTSD2SIQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2SIQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SIQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2SIQ_RD_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SIQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2SIQ_RN_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SIQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2SIQ_RU_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SIQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2SIQ_RZ_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SI_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2SI_RD_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SI_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2SI_RN_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SI_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2SI_RU_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SI_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2SI_RZ_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SSValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2SS_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSD2SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USILValidForms(t *testing.T) {
	t.Run("form=m64_r32", func(t *testing.T) {
		if _, err := VCVTSD2USIL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2USIL(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USIL_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2USIL_RD_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USIL_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2USIL_RN_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USIL_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2USIL_RU_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USIL_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSD2USIL_RZ_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USIQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := VCVTSD2USIQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2USIQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USIQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2USIQ_RD_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USIQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2USIQ_RN_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USIQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2USIQ_RU_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSD2USIQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSD2USIQ_RZ_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SDLValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SDL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SDL(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SDQValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SDQ(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SDQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SDQ_RD_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SDQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SDQ_RN_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SDQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SDQ_RU_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SDQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SDQ_RZ_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSLValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSL(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSL_RD_SAEValidForms(t *testing.T) {
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSL_RD_SAE(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSL_RN_SAEValidForms(t *testing.T) {
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSL_RN_SAE(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSL_RU_SAEValidForms(t *testing.T) {
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSL_RU_SAE(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSL_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSL_RZ_SAE(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSQValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSQ(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSQ_RD_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSQ_RN_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSQ_RU_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSI2SSQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSI2SSQ_RZ_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SDValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSS2SD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSS2SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSS2SD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSS2SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSS2SD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTSS2SD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSS2SD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SD_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSS2SD_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTSS2SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SIValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := VCVTSS2SI(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2SI(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SIQValidForms(t *testing.T) {
	t.Run("form=m32_r64", func(t *testing.T) {
		if _, err := VCVTSS2SIQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2SIQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SIQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2SIQ_RD_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SIQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2SIQ_RN_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SIQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2SIQ_RU_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SIQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2SIQ_RZ_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SI_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2SI_RD_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SI_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2SI_RN_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SI_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2SI_RU_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2SI_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2SI_RZ_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USILValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := VCVTSS2USIL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2USIL(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USIL_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2USIL_RD_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USIL_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2USIL_RN_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USIL_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2USIL_RU_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USIL_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTSS2USIL_RZ_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USIQValidForms(t *testing.T) {
	t.Run("form=m32_r64", func(t *testing.T) {
		if _, err := VCVTSS2USIQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2USIQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USIQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2USIQ_RD_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USIQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2USIQ_RN_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USIQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2USIQ_RU_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTSS2USIQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTSS2USIQ_RZ_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQXValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQX_BCSTValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQX_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQX_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQX_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQYValidForms(t *testing.T) {
	t.Run("form=m256_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQY_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQY_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQY_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2DQY_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2DQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2DQ_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2QQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2QQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2QQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2QQ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2QQ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2QQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2QQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQXValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQX(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQX(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQX_BCSTValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQX_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQX_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQX_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQX_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQX_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQYValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQY(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQY(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQY_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQY_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQY_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQY_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQY_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQY_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UDQ_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UQQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UQQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UQQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UQQ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UQQ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPD2UQQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPD2UQQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2DQValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2DQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2DQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2DQ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2DQ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2DQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2DQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2QQValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2QQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2QQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2QQ_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2QQ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2QQ_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2QQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UDQValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UDQ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UDQ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UDQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UQQValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UQQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UQQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UQQ_SAEValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_SAE(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_SAE(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UQQ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_SAE_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTPS2UQQ_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTTPS2UQQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSD2SIValidForms(t *testing.T) {
	t.Run("form=m64_r32", func(t *testing.T) {
		if _, err := VCVTTSD2SI(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTTSD2SI(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSD2SIQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := VCVTTSD2SIQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTTSD2SIQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSD2SIQ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTTSD2SIQ_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSD2SI_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTTSD2SI_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSD2USILValidForms(t *testing.T) {
	t.Run("form=m64_r32", func(t *testing.T) {
		if _, err := VCVTTSD2USIL(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTTSD2USIL(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSD2USIL_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTTSD2USIL_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSD2USIQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := VCVTTSD2USIQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTTSD2USIQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSD2USIQ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTTSD2USIQ_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSS2SIValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := VCVTTSS2SI(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTTSS2SI(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSS2SIQValidForms(t *testing.T) {
	t.Run("form=m32_r64", func(t *testing.T) {
		if _, err := VCVTTSS2SIQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTTSS2SIQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSS2SIQ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTTSS2SIQ_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSS2SI_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTTSS2SI_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSS2USILValidForms(t *testing.T) {
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := VCVTTSS2USIL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTTSS2USIL(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSS2USIL_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VCVTTSS2USIL_SAE(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSS2USIQValidForms(t *testing.T) {
	t.Run("form=m32_r64", func(t *testing.T) {
		if _, err := VCVTTSS2USIQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTTSS2USIQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTTSS2USIQ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VCVTTSS2USIQ_SAE(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PDValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PD_ZValidForms(t *testing.T) {
	t.Run("form=m256/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PD_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUDQ2PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUDQ2PS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PSValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PSXValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSX(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSX(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSX(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PSX_BCSTValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSX_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PSX_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSX_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PSX_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSX_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSX_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PSYValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSY(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSY(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSY(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PSY_BCSTValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSY_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PSY_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSY_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PSY_ZValidForms(t *testing.T) {
	t.Run("form=m256/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSY_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VCVTUQQ2PSY_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RD_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RD_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RD_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RN_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RN_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RN_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RU_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RU_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RU_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RZ_SAE(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RZ_SAE(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_RZ_SAE_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUQQ2PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VCVTUQQ2PS_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SDLValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SDL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SDL(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SDQValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SDQ(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SDQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SDQ_RD_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SDQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SDQ_RN_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SDQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SDQ_RU_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SDQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SDQ_RZ_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSLValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSL(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSL_RD_SAEValidForms(t *testing.T) {
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSL_RD_SAE(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSL_RN_SAEValidForms(t *testing.T) {
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSL_RN_SAE(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSL_RU_SAEValidForms(t *testing.T) {
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSL_RU_SAE(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSL_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=r32_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSL_RZ_SAE(reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSQValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSQ(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSQ_RD_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSQ_RD_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSQ_RN_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSQ_RN_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSQ_RU_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSQ_RU_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVCVTUSI2SSQ_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=r64_xmm_xmm", func(t *testing.T) {
		if _, err := VCVTUSI2SSQ_RZ_SAE(reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDBPSADBWValidForms(t *testing.T) {
	t.Run("form=imm8_m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm_zmm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VDBPSADBW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDBPSADBW_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDBPSADBW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDBPSADBW_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDBPSADBW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDBPSADBW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDBPSADBW_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDBPSADBW_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VDIVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VDIVPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VDIVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VDIVPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VDIVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VDIVPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VDIVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VDIVPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VDIVPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VDIVPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDIVSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VDIVSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDPPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VDPPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDPPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVDPPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VDPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VDPPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VDPPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VDPPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VEXP2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VEXP2PD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VEXP2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VEXP2PD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VEXP2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VEXP2PS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VEXP2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PS_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PS_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VEXP2PS_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PS_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXP2PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXP2PS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXPANDPDValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VEXPANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VEXPANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXPANDPD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VEXPANDPD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VEXPANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VEXPANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VEXPANDPD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VEXPANDPD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VEXPANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VEXPANDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VEXPANDPD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VEXPANDPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXPANDPD_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VEXPANDPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXPANDPD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VEXPANDPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VEXPANDPD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VEXPANDPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VEXPANDPD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXPANDPSValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VEXPANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VEXPANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXPANDPS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VEXPANDPS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VEXPANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VEXPANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VEXPANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VEXPANDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VEXPANDPS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VEXPANDPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VEXPANDPS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VEXPANDPS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXPANDPS_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VEXPANDPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VEXPANDPS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VEXPANDPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VEXPANDPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VEXPANDPS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VEXPANDPS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTF128ValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_m128", func(t *testing.T) {
		if _, err := VEXTRACTF128(operand.Imm(math.MaxInt8), reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF128(operand.Imm(math.MaxInt8), reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTF32X4ValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTF32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_m128", func(t *testing.T) {
		if _, err := VEXTRACTF32X4(operand.Imm(math.MaxInt8), reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTF32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_m128", func(t *testing.T) {
		if _, err := VEXTRACTF32X4(operand.Imm(math.MaxInt8), reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTF32X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTF32X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF32X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTF32X4_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF32X4_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTF32X8ValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VEXTRACTF32X8(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VEXTRACTF32X8(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_m256", func(t *testing.T) {
		if _, err := VEXTRACTF32X8(operand.Imm(math.MaxInt8), reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_ymm", func(t *testing.T) {
		if _, err := VEXTRACTF32X8(operand.Imm(math.MaxInt8), reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTF32X8_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VEXTRACTF32X8_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VEXTRACTF32X8_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTF64X2ValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTF64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_m128", func(t *testing.T) {
		if _, err := VEXTRACTF64X2(operand.Imm(math.MaxInt8), reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTF64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_m128", func(t *testing.T) {
		if _, err := VEXTRACTF64X2(operand.Imm(math.MaxInt8), reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTF64X2_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTF64X2_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF64X2_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTF64X2_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTF64X2_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTF64X4ValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VEXTRACTF64X4(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VEXTRACTF64X4(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_m256", func(t *testing.T) {
		if _, err := VEXTRACTF64X4(operand.Imm(math.MaxInt8), reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_ymm", func(t *testing.T) {
		if _, err := VEXTRACTF64X4(operand.Imm(math.MaxInt8), reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTF64X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VEXTRACTF64X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VEXTRACTF64X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTI128ValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_m128", func(t *testing.T) {
		if _, err := VEXTRACTI128(operand.Imm(math.MaxInt8), reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI128(operand.Imm(math.MaxInt8), reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTI32X4ValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTI32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_m128", func(t *testing.T) {
		if _, err := VEXTRACTI32X4(operand.Imm(math.MaxInt8), reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTI32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_m128", func(t *testing.T) {
		if _, err := VEXTRACTI32X4(operand.Imm(math.MaxInt8), reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTI32X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTI32X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI32X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTI32X4_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI32X4_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTI32X8ValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VEXTRACTI32X8(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VEXTRACTI32X8(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_m256", func(t *testing.T) {
		if _, err := VEXTRACTI32X8(operand.Imm(math.MaxInt8), reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_ymm", func(t *testing.T) {
		if _, err := VEXTRACTI32X8(operand.Imm(math.MaxInt8), reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTI32X8_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VEXTRACTI32X8_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VEXTRACTI32X8_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTI64X2ValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTI64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_m128", func(t *testing.T) {
		if _, err := VEXTRACTI64X2(operand.Imm(math.MaxInt8), reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTI64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_m128", func(t *testing.T) {
		if _, err := VEXTRACTI64X2(operand.Imm(math.MaxInt8), reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTI64X2_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTI64X2_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI64X2_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_m128", func(t *testing.T) {
		if _, err := VEXTRACTI64X2_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_xmm", func(t *testing.T) {
		if _, err := VEXTRACTI64X2_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTI64X4ValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VEXTRACTI64X4(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VEXTRACTI64X4(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_m256", func(t *testing.T) {
		if _, err := VEXTRACTI64X4(operand.Imm(math.MaxInt8), reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_ymm", func(t *testing.T) {
		if _, err := VEXTRACTI64X4(operand.Imm(math.MaxInt8), reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTI64X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_m256", func(t *testing.T) {
		if _, err := VEXTRACTI64X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_ymm", func(t *testing.T) {
		if _, err := VEXTRACTI64X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVEXTRACTPSValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m32", func(t *testing.T) {
		if _, err := VEXTRACTPS(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_r32", func(t *testing.T) {
		if _, err := VEXTRACTPS(operand.Imm(math.MaxInt8), reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_SAE_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPSValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPS_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_SAE_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMPS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMPS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMSDValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMSD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMSD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSD_SAE_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMSD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMSSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMSS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMSS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSS_SAE_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFIXUPIMMSS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFIXUPIMMSS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD132PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD132PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD132SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD132SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD213PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD213PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD213SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD213SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADD231PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADD231PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADD231SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADD231SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB132PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB132PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB213PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB213PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMADDSUB231PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMADDSUB231PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB132PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB132SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB132SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB213PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB213SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB213SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUB231PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUB231SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUB231SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD132PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD132PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD213PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD213PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFMSUBADD231PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFMSUBADD231PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD132PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD132SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD132SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD213PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD213SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD213SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMADD231PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMADD231SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMADD231SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB132PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB132SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB132SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB213PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB213SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB213SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VFNMSUB231PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFNMSUB231SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VFNMSUB231SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPDXValidForms(t *testing.T) {
	t.Run("form=imm8_m128/m64bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPDX(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPDX(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPDX(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k", func(t *testing.T) {
		if _, err := VFPCLASSPDX(operand.Imm(math.MaxInt8), reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPDX_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m128/m64bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPDX_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPDX_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPDYValidForms(t *testing.T) {
	t.Run("form=imm8_m256/m64bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPDY(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPDY(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPDY(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k", func(t *testing.T) {
		if _, err := VFPCLASSPDY(operand.Imm(math.MaxInt8), reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPDY_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m256/m64bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPDY_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPDY_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPDZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPDZ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPDZ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPDZ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k", func(t *testing.T) {
		if _, err := VFPCLASSPDZ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPDZ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPDZ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPDZ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPSXValidForms(t *testing.T) {
	t.Run("form=imm8_m128/m32bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPSX(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPSX(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPSX(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k", func(t *testing.T) {
		if _, err := VFPCLASSPSX(operand.Imm(math.MaxInt8), reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPSX_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m128/m32bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPSX_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPSX_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPSYValidForms(t *testing.T) {
	t.Run("form=imm8_m256/m32bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPSY(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPSY(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPSY(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k", func(t *testing.T) {
		if _, err := VFPCLASSPSY(operand.Imm(math.MaxInt8), reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPSY_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m256/m32bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPSY_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPSY_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPSZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPSZ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPSZ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPSZ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k", func(t *testing.T) {
		if _, err := VFPCLASSPSZ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSPSZ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_k", func(t *testing.T) {
		if _, err := VFPCLASSPSZ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_k", func(t *testing.T) {
		if _, err := VFPCLASSPSZ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSSDValidForms(t *testing.T) {
	t.Run("form=imm8_m64_k_k", func(t *testing.T) {
		if _, err := VFPCLASSSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64_k", func(t *testing.T) {
		if _, err := VFPCLASSSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_k", func(t *testing.T) {
		if _, err := VFPCLASSSD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k", func(t *testing.T) {
		if _, err := VFPCLASSSD(operand.Imm(math.MaxInt8), reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVFPCLASSSSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_k_k", func(t *testing.T) {
		if _, err := VFPCLASSSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32_k", func(t *testing.T) {
		if _, err := VFPCLASSSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_k", func(t *testing.T) {
		if _, err := VFPCLASSSS(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k", func(t *testing.T) {
		if _, err := VFPCLASSSS(operand.Imm(math.MaxInt8), reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGATHERDPDValidForms(t *testing.T) {
	t.Run("form=xmm_vm32x_xmm", func(t *testing.T) {
		if _, err := VGATHERDPD(reg.X7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_vm32x_ymm", func(t *testing.T) {
		if _, err := VGATHERDPD(reg.Y15, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32y_k_zmm", func(t *testing.T) {
		if _, err := VGATHERDPD(operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32x_k_xmm", func(t *testing.T) {
		if _, err := VGATHERDPD(operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32x_k_ymm", func(t *testing.T) {
		if _, err := VGATHERDPD(operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGATHERDPSValidForms(t *testing.T) {
	t.Run("form=xmm_vm32x_xmm", func(t *testing.T) {
		if _, err := VGATHERDPS(reg.X7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_vm32y_ymm", func(t *testing.T) {
		if _, err := VGATHERDPS(reg.Y15, operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32z_k_zmm", func(t *testing.T) {
		if _, err := VGATHERDPS(operand.Mem{Base: reg.R13, Index: reg.Z4, Scale: 1}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32x_k_xmm", func(t *testing.T) {
		if _, err := VGATHERDPS(operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32y_k_ymm", func(t *testing.T) {
		if _, err := VGATHERDPS(operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGATHERQPDValidForms(t *testing.T) {
	t.Run("form=xmm_vm64x_xmm", func(t *testing.T) {
		if _, err := VGATHERQPD(reg.X7, operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_vm64y_ymm", func(t *testing.T) {
		if _, err := VGATHERQPD(reg.Y15, operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64z_k_zmm", func(t *testing.T) {
		if _, err := VGATHERQPD(operand.Mem{Base: reg.R13, Index: reg.Z8, Scale: 1}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64x_k_xmm", func(t *testing.T) {
		if _, err := VGATHERQPD(operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64y_k_ymm", func(t *testing.T) {
		if _, err := VGATHERQPD(operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGATHERQPSValidForms(t *testing.T) {
	t.Run("form=xmm_vm64x_xmm", func(t *testing.T) {
		if _, err := VGATHERQPS(reg.X7, operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_vm64y_xmm", func(t *testing.T) {
		if _, err := VGATHERQPS(reg.X7, operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64z_k_ymm", func(t *testing.T) {
		if _, err := VGATHERQPS(operand.Mem{Base: reg.R13, Index: reg.Z8, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64x_k_xmm", func(t *testing.T) {
		if _, err := VGATHERQPS(operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64y_k_xmm", func(t *testing.T) {
		if _, err := VGATHERQPS(operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VGETEXPPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VGETEXPPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VGETEXPPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VGETEXPPD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VGETEXPPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VGETEXPPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VGETEXPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VGETEXPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VGETEXPPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VGETEXPPS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VGETEXPPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VGETEXPPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPS_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETEXPPS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPPS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VGETEXPPS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VGETEXPSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VGETEXPSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPSD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VGETEXPSD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPSD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VGETEXPSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VGETEXPSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPSS_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSS_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VGETEXPSS_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPSS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSS_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETEXPSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETEXPSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VGETMANTPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VGETMANTPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VGETMANTPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD_SAE_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPSValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VGETMANTPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPS_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VGETMANTPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VGETMANTPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS_SAE_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTPS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VGETMANTPS_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTPS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VGETMANTPS_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTSDValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64_xmm_xmm", func(t *testing.T) {
		if _, err := VGETMANTSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VGETMANTSD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTSD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VGETMANTSD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTSD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSD_SAE_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTSD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTSSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32_xmm_xmm", func(t *testing.T) {
		if _, err := VGETMANTSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VGETMANTSS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTSS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VGETMANTSS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTSS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSS_SAE_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVGETMANTSS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VGETMANTSS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVHADDPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VHADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VHADDPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VHADDPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VHADDPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVHADDPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VHADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VHADDPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VHADDPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VHADDPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVHSUBPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VHSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VHSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VHSUBPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VHSUBPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVHSUBPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VHSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VHSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VHSUBPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VHSUBPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTF128ValidForms(t *testing.T) {
	t.Run("form=imm8_m128_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTF128(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTF128(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTF32X4ValidForms(t *testing.T) {
	t.Run("form=imm8_m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X4(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X4(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTF32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTF32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTF32X4(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTF32X4(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTF32X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X4_Z(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTF32X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTF32X4_Z(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTF32X8ValidForms(t *testing.T) {
	t.Run("form=imm8_m256_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X8(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X8(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X8(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X8(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTF32X8_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m256_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X8_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF32X8_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTF64X2ValidForms(t *testing.T) {
	t.Run("form=imm8_m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X2(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X2(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTF64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTF64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTF64X2(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTF64X2(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTF64X2_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X2_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X2_Z(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTF64X2_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTF64X2_Z(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTF64X4ValidForms(t *testing.T) {
	t.Run("form=imm8_m256_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X4(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X4(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTF64X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m256_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTF64X4_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTI128ValidForms(t *testing.T) {
	t.Run("form=imm8_m128_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTI128(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTI128(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTI32X4ValidForms(t *testing.T) {
	t.Run("form=imm8_m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X4(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X4(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTI32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTI32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTI32X4(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTI32X4(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTI32X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X4_Z(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTI32X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTI32X4_Z(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTI32X8ValidForms(t *testing.T) {
	t.Run("form=imm8_m256_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X8(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X8(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X8(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X8(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTI32X8_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m256_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X8_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI32X8_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTI64X2ValidForms(t *testing.T) {
	t.Run("form=imm8_m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X2(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X2(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTI64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTI64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTI64X2(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VINSERTI64X2(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTI64X2_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X2_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X2_Z(operand.Imm(math.MaxInt8), reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTI64X2_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VINSERTI64X2_Z(operand.Imm(math.MaxInt8), reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTI64X4ValidForms(t *testing.T) {
	t.Run("form=imm8_m256_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X4(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X4(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTI64X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m256_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VINSERTI64X4_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVINSERTPSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_xmm", func(t *testing.T) {
		if _, err := VINSERTPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VINSERTPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVLDDQUValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VLDDQU(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VLDDQU(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVLDMXCSRValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := VLDMXCSR(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMASKMOVDQUValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMASKMOVDQU(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMASKMOVPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VMASKMOVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VMASKMOVPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_m128", func(t *testing.T) {
		if _, err := VMASKMOVPD(reg.X7, reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_m256", func(t *testing.T) {
		if _, err := VMASKMOVPD(reg.Y15, reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMASKMOVPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VMASKMOVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VMASKMOVPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_m128", func(t *testing.T) {
		if _, err := VMASKMOVPS(reg.X7, reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_m256", func(t *testing.T) {
		if _, err := VMASKMOVPS(reg.Y15, reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VMAXPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VMAXPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMAXPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMAXPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMAXPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMAXPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMAXPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMAXPD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VMAXPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VMAXPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMAXPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMAXPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMAXPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMAXPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMAXPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPS_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPS_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMAXPS_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPS_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMAXPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMAXPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXSD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXSD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXSD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXSS_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSS_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMAXSS_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXSS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSS_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMAXSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMAXSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VMINPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VMINPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMINPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VMINPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMINPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMINPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMINPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMINPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMINPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMINPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMINPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMINPD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VMINPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VMINPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMINPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VMINPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMINPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMINPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMINPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMINPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMINPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMINPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMINPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPS_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPS_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMINPS_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPS_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMINPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMINPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMINSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINSD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMINSD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINSD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VMINSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMINSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINSS_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSS_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMINSS_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINSS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSS_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMINSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMINSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVAPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVAPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVAPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVAPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVAPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVAPD(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVAPD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVAPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVAPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVAPD(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVAPD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVAPD(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVAPD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVAPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVAPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVAPD(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVAPD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVAPD(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVAPD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVAPD_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVAPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVAPD_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVAPD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVAPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVAPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVAPD_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVAPD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVAPD_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVAPD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVAPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVAPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVAPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVAPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVAPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVAPS(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVAPS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVAPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVAPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVAPS(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVAPS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVAPS(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVAPS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVAPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVAPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVAPS(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVAPS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVAPS(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVAPS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVAPS_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVAPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVAPS_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVAPS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVAPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVAPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVAPS_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVAPS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVAPS_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVAPS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VMOVD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm", func(t *testing.T) {
		if _, err := VMOVD(reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := VMOVD(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VMOVD(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDDUPValidForms(t *testing.T) {
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVDDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VMOVDDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVDDUP(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVDDUP(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVDDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDDUP(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVDDUP(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VMOVDDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDDUP(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDDUP(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDDUP_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDDUP_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDDUP_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDDUP_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VMOVDDUP_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDDUP_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDDUP_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQAValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVDQA(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVDQA(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVDQA(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVDQA(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVDQA(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVDQA(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQA32ValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQA32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVDQA32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQA32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVDQA32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQA32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVDQA32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVDQA32(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQA32_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQA32_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQA32_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQA32_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQA32_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQA32_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQA32_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQA32_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQA32_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQA32_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQA64ValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQA64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVDQA64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQA64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVDQA64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQA64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVDQA64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVDQA64(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQA64_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQA64_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQA64_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQA64_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQA64_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQA64_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQA64_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQA64_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQA64_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQA64_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQUValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVDQU(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVDQU(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVDQU(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVDQU(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVDQU(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVDQU(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQU16ValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU16(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVDQU16(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU16(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVDQU16(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU16(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVDQU16(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVDQU16(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQU16_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU16_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQU16_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU16_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU16_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU16_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQU16_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU16_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQU16_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU16_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQU32ValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVDQU32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVDQU32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVDQU32(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVDQU32(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQU32_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU32_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQU32_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU32_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU32_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU32_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQU32_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU32_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQU32_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU32_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQU64ValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVDQU64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVDQU64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVDQU64(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVDQU64(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQU64_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU64_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQU64_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU64_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU64_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU64_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQU64_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU64_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQU64_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU64_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQU8ValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVDQU8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVDQU8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVDQU8(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVDQU8(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVDQU8_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU8_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVDQU8_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVDQU8_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU8_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU8_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVDQU8_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVDQU8_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVDQU8_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVDQU8_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVHLPSValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMOVHLPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVHPDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VMOVHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VMOVHPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVHPSValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VMOVHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VMOVHPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVLHPSValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMOVLHPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVLPDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VMOVLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VMOVLPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVLPSValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VMOVLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VMOVLPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVMSKPDValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VMOVMSKPD(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_r32", func(t *testing.T) {
		if _, err := VMOVMSKPD(reg.Y15, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVMSKPSValidForms(t *testing.T) {
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VMOVMSKPS(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_r32", func(t *testing.T) {
		if _, err := VMOVMSKPS(reg.Y15, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVNTDQValidForms(t *testing.T) {
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVNTDQ(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVNTDQ(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVNTDQ(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVNTDQAValidForms(t *testing.T) {
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVNTDQA(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVNTDQA(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVNTDQA(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVNTPDValidForms(t *testing.T) {
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVNTPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVNTPD(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVNTPD(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVNTPSValidForms(t *testing.T) {
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVNTPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVNTPS(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVNTPS(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVQValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VMOVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm", func(t *testing.T) {
		if _, err := VMOVQ(reg.R11, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VMOVQ(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r64", func(t *testing.T) {
		if _, err := VMOVQ(reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VMOVSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VMOVSD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMOVSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VMOVSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VMOVSD(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VMOVSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVSHDUPValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVSHDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVSHDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVSHDUP(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVSHDUP(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVSHDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVSHDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVSHDUP(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVSHDUP(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVSHDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVSHDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVSHDUP(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVSHDUP(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVSHDUP_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVSHDUP_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVSHDUP_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVSHDUP_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVSHDUP_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVSHDUP_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVSHDUP_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVSLDUPValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVSLDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVSLDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVSLDUP(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVSLDUP(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVSLDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVSLDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVSLDUP(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVSLDUP(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVSLDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVSLDUP(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVSLDUP(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVSLDUP(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVSLDUP_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVSLDUP_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVSLDUP_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVSLDUP_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVSLDUP_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVSLDUP_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVSLDUP_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VMOVSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := VMOVSS(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMOVSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VMOVSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VMOVSS(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VMOVSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVUPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVUPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVUPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVUPD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVUPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVUPD(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVUPD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVUPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVUPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVUPD(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVUPD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVUPD(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVUPD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVUPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVUPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVUPD(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVUPD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVUPD(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVUPD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVUPD_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVUPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVUPD_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVUPD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVUPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVUPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVUPD_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVUPD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVUPD_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVUPD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVUPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VMOVUPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VMOVUPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VMOVUPS(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VMOVUPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VMOVUPS(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VMOVUPS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVUPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VMOVUPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVUPS(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVUPS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VMOVUPS(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VMOVUPS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVUPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVUPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVUPS(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVUPS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVUPS(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVUPS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMOVUPS_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VMOVUPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VMOVUPS_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VMOVUPS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VMOVUPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VMOVUPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VMOVUPS_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VMOVUPS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VMOVUPS_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VMOVUPS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMPSADBWValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VMPSADBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VMPSADBW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VMPSADBW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMPSADBW(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VMULPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VMULPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VMULPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMULPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMULPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMULPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMULPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VMULPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VMULPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VMULPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMULPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMULPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VMULPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VMULPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VMULPS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VMULPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VMULPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VMULSS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVMULSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VMULSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVORPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VORPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VORPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VORPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVORPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVORPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVORPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVORPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VORPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VORPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VORPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVORPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVORPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVORPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VORPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VORPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VORPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSBValidForms(t *testing.T) {
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VPABSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPABSB(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VPABSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPABSB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VPABSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VPABSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPABSB(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPABSB(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VPABSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VPABSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPABSB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPABSB(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSB_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VPABSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPABSB_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VPABSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VPABSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPABSB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPABSB_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSDValidForms(t *testing.T) {
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VPABSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPABSD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VPABSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPABSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPABSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPABSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPABSD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPABSD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPABSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPABSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPABSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPABSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPABSD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPABSD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPABSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPABSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPABSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPABSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPABSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPABSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPABSD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPABSD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPABSD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPABSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPABSD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPABSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPABSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPABSD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPABSD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPABSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPABSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPABSQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPABSQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPABSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPABSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPABSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPABSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPABSQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPABSQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPABSQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPABSQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPABSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPABSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPABSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPABSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPABSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPABSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPABSQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPABSQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPABSQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPABSQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPABSQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPABSQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPABSQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPABSQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPABSQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VPABSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPABSW(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VPABSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPABSW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VPABSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VPABSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPABSW(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPABSW(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VPABSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VPABSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPABSW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPABSW(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPABSW_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VPABSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPABSW_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VPABSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VPABSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPABSW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPABSW_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKSSDWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKSSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSDW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKSSDW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKSSDW_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKSSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKSSDW_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSDW_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKSSDW_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSDW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSDW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSDW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSDW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKSSWBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKSSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKSSWB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKSSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKSSWB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKSSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSWB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKSSWB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSWB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSWB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKSSWB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSWB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKSSWB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSWB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSWB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKSSWB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKSSWB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKUSDWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKUSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSDW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKUSDW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKUSDW_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKUSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKUSDW_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSDW_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKUSDW_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSDW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSDW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSDW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSDW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKUSWBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKUSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPACKUSWB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKUSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPACKUSWB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKUSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSWB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPACKUSWB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSWB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSWB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSWB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPACKUSWB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSWB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPACKUSWB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSWB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSWB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPACKUSWB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPACKUSWB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDSBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDSB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDSB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDSB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDSB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDSB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDSB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDSB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDSB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDSB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDSB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDSW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDSW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDSW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDSW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDSW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDSW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDSW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDSW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDUSBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDUSB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDUSB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDUSB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDUSB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDUSB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDUSB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDUSB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDUSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDUSB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDUSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDUSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDUSB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDUSB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDUSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDUSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDUSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDUSW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDUSW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDUSW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDUSW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDUSW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDUSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDUSW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDUSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDUSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDUSW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDUSW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPADDW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPADDW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPADDW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPADDW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPADDW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPADDW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPADDW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPALIGNRValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPALIGNR(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPALIGNR_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPALIGNR_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPALIGNR_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPALIGNR_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPALIGNR_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPALIGNR_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPALIGNR_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPAND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPAND(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPAND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPAND(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDNValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDN(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDN(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDN(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDN(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDNDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDND(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDND(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDND(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDND(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDND(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDND(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDND_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDND_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDND_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDND_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDND_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDND_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDND_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDND_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDND_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDND_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDND_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDND_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDND_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDND_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDND_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDND_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDND_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDND_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDNQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDNQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDNQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDNQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDNQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDNQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDNQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDNQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDNQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDNQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDNQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDNQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDNQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDNQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDNQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDNQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDNQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDNQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDNQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDNQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDNQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDNQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDNQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDNQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDNQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDNQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDNQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDNQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDNQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDNQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDNQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPANDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPANDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPANDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPANDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPANDQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPANDQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPANDQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPAVGBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPAVGB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPAVGB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPAVGB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPAVGB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPAVGB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPAVGB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPAVGB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPAVGB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPAVGB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPAVGB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPAVGB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPAVGB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPAVGB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPAVGB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPAVGB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPAVGB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPAVGB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPAVGB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPAVGB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPAVGWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPAVGW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPAVGW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPAVGW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPAVGW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPAVGW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPAVGW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPAVGW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPAVGW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPAVGW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPAVGW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPAVGW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPAVGW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPAVGW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPAVGW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPAVGW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPAVGW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPAVGW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPAVGW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPAVGW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMBValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMWValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPBLENDMW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDMW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDMW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDMW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPBLENDMW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBLENDMW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPBLENDMW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDVBValidForms(t *testing.T) {
	t.Run("form=ymm_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDVB(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDVB(reg.Y15, reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDVB(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDVB(reg.X7, reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBLENDWValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPBLENDW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPBLENDW(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTBValidForms(t *testing.T) {
	t.Run("form=m8_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.R10L, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.R10L, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.R10L, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.R10L, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.R10L, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTB(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTB_ZValidForms(t *testing.T) {
	t.Run("form=m8_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTB_Z(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTB_Z(reg.R10L, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTB_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTB_Z(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTB_Z(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTB_Z(reg.R10L, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTB_Z(reg.R10L, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTB_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTDValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.R10L, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.R10L, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.R10L, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.R10L, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.R10L, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTD(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTD_ZValidForms(t *testing.T) {
	t.Run("form=m32_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTD_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTD_Z(reg.R10L, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTD_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTD_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTD_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTD_Z(reg.R10L, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTD_Z(reg.R10L, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTD_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTMB2QValidForms(t *testing.T) {
	t.Run("form=k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTMB2Q(reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTMB2Q(reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTMB2Q(reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTMW2DValidForms(t *testing.T) {
	t.Run("form=k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTMW2D(reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTMW2D(reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTMW2D(reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTQValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.R11, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.R11, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.R11, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.R11, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.R11, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.R11, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTQ_ZValidForms(t *testing.T) {
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ_Z(reg.R11, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ_Z(reg.R11, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTQ_Z(reg.R11, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTWValidForms(t *testing.T) {
	t.Run("form=m16_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.R10L, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.R10L, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.R10L, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.R10L, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.R10L, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.R10L, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTW(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPBROADCASTW_ZValidForms(t *testing.T) {
	t.Run("form=m16_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTW_Z(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTW_Z(reg.R10L, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPBROADCASTW_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTW_Z(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTW_Z(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTW_Z(reg.R10L, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTW_Z(reg.R10L, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPBROADCASTW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPBROADCASTW_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCLMULQDQValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPCLMULQDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPCLMULQDQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPBValidForms(t *testing.T) {
	t.Run("form=imm8_m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPB(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPEQBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPEQB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPEQB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPEQB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPEQB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQB(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQB(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQB(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQB(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQB(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQB(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPEQDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPEQD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPEQD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPEQD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPEQD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQD(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQD(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQD(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQD(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQD(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQD(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPEQD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPEQQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPEQQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPEQQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQQ(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPEQQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPEQWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPEQW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPEQW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPEQW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPEQW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQW(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPEQW(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQW(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPEQW(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPEQW(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPEQW(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPESTRIValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPCMPESTRI(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPESTRI(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPESTRMValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPCMPESTRM(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPESTRM(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPGTBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPGTB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPGTB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPGTB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPGTB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTB(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTB(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTB(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTB(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTB(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTB(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPGTDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPGTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPGTD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPGTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPGTD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTD(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTD(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTD(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTD(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTD(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTD(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPGTD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPGTQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPGTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPGTQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPGTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPGTQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTQ(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPGTQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPGTWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPGTW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPCMPGTW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPGTW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPGTW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTW(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPGTW(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTW(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPGTW(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPGTW(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPGTW(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPISTRIValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPCMPISTRI(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPISTRI(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPISTRMValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPCMPISTRM(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPCMPISTRM(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPQValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPUBValidForms(t *testing.T) {
	t.Run("form=imm8_m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUB(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPUDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPUD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPUQValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPUQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPUWValidForms(t *testing.T) {
	t.Run("form=imm8_m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPUW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCMPWValidForms(t *testing.T) {
	t.Run("form=imm8_m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k", func(t *testing.T) {
		if _, err := VPCMPW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCOMPRESSDValidForms(t *testing.T) {
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPCOMPRESSD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCOMPRESSD_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VPCOMPRESSD_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPCOMPRESSD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VPCOMPRESSD_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPCOMPRESSD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VPCOMPRESSD_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPCOMPRESSD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCOMPRESSQValidForms(t *testing.T) {
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m512", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m128", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m256", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPCOMPRESSQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCOMPRESSQ_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m512", func(t *testing.T) {
		if _, err := VPCOMPRESSQ_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPCOMPRESSQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m128", func(t *testing.T) {
		if _, err := VPCOMPRESSQ_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPCOMPRESSQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m256", func(t *testing.T) {
		if _, err := VPCOMPRESSQ_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPCOMPRESSQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCONFLICTDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCONFLICTD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCONFLICTD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCONFLICTD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCONFLICTQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCONFLICTQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCONFLICTQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPCONFLICTQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPCONFLICTQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERM2F128ValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPERM2F128(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERM2F128(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERM2I128ValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPERM2I128(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERM2I128(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2DValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2D(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2D(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2D(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2D(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2D(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2D(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2D_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2D_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2D_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2D_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2D_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2D_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2D_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2D_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2D_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2D_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2D_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2D_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2PDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2PSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2QValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2Q(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2Q(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2Q(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2Q(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2Q(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2Q(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2Q_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2Q_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2Q_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2Q_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2Q_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2Q_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2Q_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2Q_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2Q_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2Q_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2Q_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2Q_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2WValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2W(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMI2W(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2W(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMI2W(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2W(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMI2W(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMI2W_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2W_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMI2W_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2W_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2W_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMI2W_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMI2W_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMILPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMILPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMILPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMILPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMILPD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMILPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMILPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMILPS_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMILPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMILPS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMILPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMPDValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPERMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPERMPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMPD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMPSValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMQValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPERMQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPERMQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMQ_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2DValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2D(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2D(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2D(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2D(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2D(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2D(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2D(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2D_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2D_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2D_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2D_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2D_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2D_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2D_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2D_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2D_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2D_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2D_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2D_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2D_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2PDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2PD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2PD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2PD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2PSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2PS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2PS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2PS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2PS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2PS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2PS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2QValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2Q(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2Q(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2Q(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2Q(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2Q(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2Q(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2Q(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2Q_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2Q_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2Q_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2Q_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2Q_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2Q_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2Q_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2Q_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2Q_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2Q_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2Q_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2Q_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2Q_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2WValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2W(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMT2W(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2W(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2W(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMT2W(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2W(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMT2W(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMT2W_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2W_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMT2W_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2W_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2W_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMT2W_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMT2W_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMWValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPERMW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPERMW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPERMW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPERMW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPERMW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPERMW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPERMW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPEXPANDDValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VPEXPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VPEXPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPEXPANDD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPEXPANDD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VPEXPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VPEXPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VPEXPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VPEXPANDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPEXPANDD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPEXPANDD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPEXPANDD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPEXPANDD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPEXPANDD_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VPEXPANDD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPEXPANDD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VPEXPANDD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VPEXPANDD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPEXPANDD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPEXPANDD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPEXPANDQValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VPEXPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm", func(t *testing.T) {
		if _, err := VPEXPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPEXPANDQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPEXPANDQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VPEXPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VPEXPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VPEXPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VPEXPANDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPEXPANDQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPEXPANDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPEXPANDQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPEXPANDQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPEXPANDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512_k_zmm", func(t *testing.T) {
		if _, err := VPEXPANDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPEXPANDQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_xmm", func(t *testing.T) {
		if _, err := VPEXPANDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_ymm", func(t *testing.T) {
		if _, err := VPEXPANDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPEXPANDQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPEXPANDQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPEXTRBValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m8", func(t *testing.T) {
		if _, err := VPEXTRB(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_r32", func(t *testing.T) {
		if _, err := VPEXTRB(operand.Imm(math.MaxInt8), reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPEXTRDValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m32", func(t *testing.T) {
		if _, err := VPEXTRD(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_r32", func(t *testing.T) {
		if _, err := VPEXTRD(operand.Imm(math.MaxInt8), reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPEXTRQValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m64", func(t *testing.T) {
		if _, err := VPEXTRQ(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_r64", func(t *testing.T) {
		if _, err := VPEXTRQ(operand.Imm(math.MaxInt8), reg.X7, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPEXTRWValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_m16", func(t *testing.T) {
		if _, err := VPEXTRW(operand.Imm(math.MaxInt8), reg.X7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_r32", func(t *testing.T) {
		if _, err := VPEXTRW(operand.Imm(math.MaxInt8), reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPGATHERDDValidForms(t *testing.T) {
	t.Run("form=xmm_vm32x_xmm", func(t *testing.T) {
		if _, err := VPGATHERDD(reg.X7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_vm32y_ymm", func(t *testing.T) {
		if _, err := VPGATHERDD(reg.Y15, operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32z_k_zmm", func(t *testing.T) {
		if _, err := VPGATHERDD(operand.Mem{Base: reg.R13, Index: reg.Z4, Scale: 1}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32x_k_xmm", func(t *testing.T) {
		if _, err := VPGATHERDD(operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32y_k_ymm", func(t *testing.T) {
		if _, err := VPGATHERDD(operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPGATHERDQValidForms(t *testing.T) {
	t.Run("form=xmm_vm32x_xmm", func(t *testing.T) {
		if _, err := VPGATHERDQ(reg.X7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_vm32x_ymm", func(t *testing.T) {
		if _, err := VPGATHERDQ(reg.Y15, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32y_k_zmm", func(t *testing.T) {
		if _, err := VPGATHERDQ(operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32x_k_xmm", func(t *testing.T) {
		if _, err := VPGATHERDQ(operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm32x_k_ymm", func(t *testing.T) {
		if _, err := VPGATHERDQ(operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPGATHERQDValidForms(t *testing.T) {
	t.Run("form=xmm_vm64x_xmm", func(t *testing.T) {
		if _, err := VPGATHERQD(reg.X7, operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_vm64y_xmm", func(t *testing.T) {
		if _, err := VPGATHERQD(reg.X7, operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64z_k_ymm", func(t *testing.T) {
		if _, err := VPGATHERQD(operand.Mem{Base: reg.R13, Index: reg.Z8, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64x_k_xmm", func(t *testing.T) {
		if _, err := VPGATHERQD(operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64y_k_xmm", func(t *testing.T) {
		if _, err := VPGATHERQD(operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPGATHERQQValidForms(t *testing.T) {
	t.Run("form=xmm_vm64x_xmm", func(t *testing.T) {
		if _, err := VPGATHERQQ(reg.X7, operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_vm64y_ymm", func(t *testing.T) {
		if _, err := VPGATHERQQ(reg.Y15, operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64z_k_zmm", func(t *testing.T) {
		if _, err := VPGATHERQQ(operand.Mem{Base: reg.R13, Index: reg.Z8, Scale: 1}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64x_k_xmm", func(t *testing.T) {
		if _, err := VPGATHERQQ(operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=vm64y_k_ymm", func(t *testing.T) {
		if _, err := VPGATHERQQ(operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPHADDDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPHADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPHADDD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPHADDD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPHADDD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPHADDSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPHADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPHADDSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPHADDSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPHADDSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPHADDWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPHADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPHADDW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPHADDW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPHADDW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPHMINPOSUWValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VPHMINPOSUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPHMINPOSUW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPHSUBDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPHSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPHSUBD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPHSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPHSUBD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPHSUBSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPHSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPHSUBSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPHSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPHSUBSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPHSUBWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPHSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPHSUBW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPHSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPHSUBW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPINSRBValidForms(t *testing.T) {
	t.Run("form=imm8_m8_xmm_xmm", func(t *testing.T) {
		if _, err := VPINSRB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_xmm_xmm", func(t *testing.T) {
		if _, err := VPINSRB(operand.Imm(math.MaxInt8), reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPINSRDValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_xmm", func(t *testing.T) {
		if _, err := VPINSRD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_xmm_xmm", func(t *testing.T) {
		if _, err := VPINSRD(operand.Imm(math.MaxInt8), reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPINSRQValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_xmm", func(t *testing.T) {
		if _, err := VPINSRQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64_xmm_xmm", func(t *testing.T) {
		if _, err := VPINSRQ(operand.Imm(math.MaxInt8), reg.R11, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPINSRWValidForms(t *testing.T) {
	t.Run("form=imm8_m16_xmm_xmm", func(t *testing.T) {
		if _, err := VPINSRW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32_xmm_xmm", func(t *testing.T) {
		if _, err := VPINSRW(operand.Imm(math.MaxInt8), reg.R10L, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPLZCNTDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPLZCNTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPLZCNTD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPLZCNTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPLZCNTD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPLZCNTD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPLZCNTD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPLZCNTD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPLZCNTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPLZCNTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPLZCNTD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPLZCNTD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPLZCNTD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPLZCNTQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPLZCNTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTQ(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VPLZCNTQ(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPLZCNTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPLZCNTQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPLZCNTQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTQ(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPLZCNTQ(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPLZCNTQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPLZCNTQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPLZCNTQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPLZCNTQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPLZCNTQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VPLZCNTQ_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADD52HUQValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADD52HUQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADD52HUQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADD52HUQ_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52HUQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADD52LUQValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADD52LUQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADD52LUQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADD52LUQ_ZValidForms(t *testing.T) {
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADD52LUQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADDUBSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADDUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADDUBSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADDUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADDUBSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADDUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADDUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADDUBSW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADDUBSW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADDUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADDUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADDUBSW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADDUBSW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADDUBSW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADDUBSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADDUBSW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADDUBSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADDUBSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADDUBSW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADDUBSW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADDWDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADDWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMADDWD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADDWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMADDWD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADDWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADDWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADDWD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMADDWD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADDWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADDWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADDWD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADDWD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMADDWD_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADDWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMADDWD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADDWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADDWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMADDWD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMADDWD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMASKMOVDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMASKMOVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMASKMOVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_m128", func(t *testing.T) {
		if _, err := VPMASKMOVD(reg.X7, reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_m256", func(t *testing.T) {
		if _, err := VPMASKMOVD(reg.Y15, reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMASKMOVQValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMASKMOVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMASKMOVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_m128", func(t *testing.T) {
		if _, err := VPMASKMOVQ(reg.X7, reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_m256", func(t *testing.T) {
		if _, err := VPMASKMOVQ(reg.Y15, reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXSW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXSW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXSW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXSW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXSW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMAXUW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMAXUW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMAXUW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMAXUW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMAXUW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMAXUW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMAXUW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINSW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINSW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINSW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINSW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINSW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMINUW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMINUW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMINUW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMINUW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMINUW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMINUW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMINUW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVB2MValidForms(t *testing.T) {
	t.Run("form=zmm_k", func(t *testing.T) {
		if _, err := VPMOVB2M(reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k", func(t *testing.T) {
		if _, err := VPMOVB2M(reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k", func(t *testing.T) {
		if _, err := VPMOVB2M(reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVD2MValidForms(t *testing.T) {
	t.Run("form=zmm_k", func(t *testing.T) {
		if _, err := VPMOVD2M(reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k", func(t *testing.T) {
		if _, err := VPMOVD2M(reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k", func(t *testing.T) {
		if _, err := VPMOVD2M(reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVDBValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVDB(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDB(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m128", func(t *testing.T) {
		if _, err := VPMOVDB(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_xmm", func(t *testing.T) {
		if _, err := VPMOVDB(reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVDB(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := VPMOVDB(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVDB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVDB(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDB(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m64", func(t *testing.T) {
		if _, err := VPMOVDB(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVDB(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVDB_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVDB_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDB_Z(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVDB_Z(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVDB_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDB_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVDWValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVDW(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVDW(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m256", func(t *testing.T) {
		if _, err := VPMOVDW(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VPMOVDW(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVDW(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VPMOVDW(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVDW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVDW(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDW(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m128", func(t *testing.T) {
		if _, err := VPMOVDW(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVDW(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVDW_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVDW_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVDW_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVDW_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVDW_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVDW_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVM2BValidForms(t *testing.T) {
	t.Run("form=k_zmm", func(t *testing.T) {
		if _, err := VPMOVM2B(reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_xmm", func(t *testing.T) {
		if _, err := VPMOVM2B(reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_ymm", func(t *testing.T) {
		if _, err := VPMOVM2B(reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVM2DValidForms(t *testing.T) {
	t.Run("form=k_zmm", func(t *testing.T) {
		if _, err := VPMOVM2D(reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_xmm", func(t *testing.T) {
		if _, err := VPMOVM2D(reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_ymm", func(t *testing.T) {
		if _, err := VPMOVM2D(reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVM2QValidForms(t *testing.T) {
	t.Run("form=k_zmm", func(t *testing.T) {
		if _, err := VPMOVM2Q(reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_xmm", func(t *testing.T) {
		if _, err := VPMOVM2Q(reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_ymm", func(t *testing.T) {
		if _, err := VPMOVM2Q(reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVM2WValidForms(t *testing.T) {
	t.Run("form=k_zmm", func(t *testing.T) {
		if _, err := VPMOVM2W(reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_xmm", func(t *testing.T) {
		if _, err := VPMOVM2W(reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=k_ymm", func(t *testing.T) {
		if _, err := VPMOVM2W(reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVMSKBValidForms(t *testing.T) {
	t.Run("form=ymm_r32", func(t *testing.T) {
		if _, err := VPMOVMSKB(reg.Y15, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_r32", func(t *testing.T) {
		if _, err := VPMOVMSKB(reg.X7, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVQ2MValidForms(t *testing.T) {
	t.Run("form=zmm_k", func(t *testing.T) {
		if _, err := VPMOVQ2M(reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k", func(t *testing.T) {
		if _, err := VPMOVQ2M(reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k", func(t *testing.T) {
		if _, err := VPMOVQ2M(reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVQBValidForms(t *testing.T) {
	t.Run("form=zmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVQB(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQB(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m64", func(t *testing.T) {
		if _, err := VPMOVQB(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_xmm", func(t *testing.T) {
		if _, err := VPMOVQB(reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m16", func(t *testing.T) {
		if _, err := VPMOVQB(reg.X7, reg.K7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m16", func(t *testing.T) {
		if _, err := VPMOVQB(reg.X7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVQB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m32", func(t *testing.T) {
		if _, err := VPMOVQB(reg.Y15, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQB(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m32", func(t *testing.T) {
		if _, err := VPMOVQB(reg.Y15, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVQB(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVQB_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVQB_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQB_Z(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m16", func(t *testing.T) {
		if _, err := VPMOVQB_Z(reg.X7, reg.K7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m32", func(t *testing.T) {
		if _, err := VPMOVQB_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQB_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVQDValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVQD(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVQD(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m256", func(t *testing.T) {
		if _, err := VPMOVQD(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VPMOVQD(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVQD(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VPMOVQD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVQD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVQD(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQD(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m128", func(t *testing.T) {
		if _, err := VPMOVQD(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVQD(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVQD_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVQD_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVQD_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVQD_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVQD_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQD_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVQWValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVQW(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQW(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m128", func(t *testing.T) {
		if _, err := VPMOVQW(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_xmm", func(t *testing.T) {
		if _, err := VPMOVQW(reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVQW(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := VPMOVQW(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVQW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVQW(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQW(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m64", func(t *testing.T) {
		if _, err := VPMOVQW(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVQW(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVQW_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVQW_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQW_Z(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVQW_Z(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVQW_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVQW_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSDBValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m128", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m64", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVSDB(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSDB_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSDB_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDB_Z(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVSDB_Z(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSDB_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDB_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSDWValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m256", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m128", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVSDW(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSDW_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVSDW_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSDW_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSDW_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSDW_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSDW_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSQBValidForms(t *testing.T) {
	t.Run("form=zmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m64", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m16", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.X7, reg.K7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m16", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.X7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m32", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.Y15, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m32", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.Y15, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVSQB(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSQB_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSQB_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQB_Z(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m16", func(t *testing.T) {
		if _, err := VPMOVSQB_Z(reg.X7, reg.K7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m32", func(t *testing.T) {
		if _, err := VPMOVSQB_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQB_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSQDValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m256", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m128", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVSQD(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSQD_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVSQD_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSQD_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSQD_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSQD_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQD_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSQWValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m128", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m64", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVSQW(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSQW_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSQW_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQW_Z(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVSQW_Z(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSQW_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSQW_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSWBValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m256", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m128", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVSWB(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSWB_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVSWB_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSWB_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVSWB_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSWB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVSWB_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSWB_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXBDValidForms(t *testing.T) {
	t.Run("form=m64_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBD(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBD(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBD(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBD(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXBD_ZValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBD_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBD_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBD_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXBQValidForms(t *testing.T) {
	t.Run("form=m32_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXBQ_ZValidForms(t *testing.T) {
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ_Z(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBQ_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXBWValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBW(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBW(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBW(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBW(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXBW_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXBW_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXBW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXBW_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXDQValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXDQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXDQ_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXDQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXDQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXWDValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWD(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWD(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWD(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWD(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXWD_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWD_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWD_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXWQValidForms(t *testing.T) {
	t.Run("form=m64_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVSXWQ_ZValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVSXWQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVSXWQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSDBValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m128", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m64", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDB(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSDB_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSDB_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDB_Z(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVUSDB_Z(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSDB_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDB_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSDWValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m256", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m128", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDW(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSDW_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVUSDW_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVUSDW_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSDW_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSDW_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSDW_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSQBValidForms(t *testing.T) {
	t.Run("form=zmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m64", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m16", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.X7, reg.K7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m16", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.X7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m32", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.Y15, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m32", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.Y15, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQB(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSQB_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSQB_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQB_Z(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m16", func(t *testing.T) {
		if _, err := VPMOVUSQB_Z(reg.X7, reg.K7, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m32", func(t *testing.T) {
		if _, err := VPMOVUSQB_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQB_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSQDValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m256", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m128", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQD(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSQD_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVUSQD_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVUSQD_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSQD_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSQD_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQD_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSQWValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m128", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.Z31, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m32", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.X7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m64", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQW(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSQW_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSQW_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQW_Z(reg.Z31, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m32", func(t *testing.T) {
		if _, err := VPMOVUSQW_Z(reg.X7, reg.K7, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSQW_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSQW_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSWBValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m256", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m128", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVUSWB(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVUSWB_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVUSWB_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVUSWB_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVUSWB_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSWB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVUSWB_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVUSWB_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVW2MValidForms(t *testing.T) {
	t.Run("form=zmm_k", func(t *testing.T) {
		if _, err := VPMOVW2M(reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k", func(t *testing.T) {
		if _, err := VPMOVW2M(reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k", func(t *testing.T) {
		if _, err := VPMOVW2M(reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVWBValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVWB(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVWB(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_m256", func(t *testing.T) {
		if _, err := VPMOVWB(reg.Z31, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_ymm", func(t *testing.T) {
		if _, err := VPMOVWB(reg.Z31, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVWB(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVWB(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_m64", func(t *testing.T) {
		if _, err := VPMOVWB(reg.X7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVWB(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVWB(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVWB(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_m128", func(t *testing.T) {
		if _, err := VPMOVWB(reg.Y15, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_xmm", func(t *testing.T) {
		if _, err := VPMOVWB(reg.Y15, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVWB_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_m256", func(t *testing.T) {
		if _, err := VPMOVWB_Z(reg.Z31, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVWB_Z(reg.Z31, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_m64", func(t *testing.T) {
		if _, err := VPMOVWB_Z(reg.X7, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVWB_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_m128", func(t *testing.T) {
		if _, err := VPMOVWB_Z(reg.Y15, reg.K7, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVWB_Z(reg.Y15, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXBDValidForms(t *testing.T) {
	t.Run("form=m64_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBD(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBD(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBD(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBD(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBD(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXBD_ZValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBD_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBD_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBD_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXBQValidForms(t *testing.T) {
	t.Run("form=m32_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXBQ_ZValidForms(t *testing.T) {
	t.Run("form=m64_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ_Z(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBQ_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXBWValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBW(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBW(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBW(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBW(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBW(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBW(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXBW_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXBW_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXBW_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXBW_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXDQValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXDQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXDQ_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXDQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXDQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXWDValidForms(t *testing.T) {
	t.Run("form=m128_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWD(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWD(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWD(reg.Y15, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWD(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXWD_ZValidForms(t *testing.T) {
	t.Run("form=m256_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWD_Z(reg.Y15, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWD_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXWQValidForms(t *testing.T) {
	t.Run("form=m64_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(reg.X7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(reg.X7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWQ(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMOVZXWQ_ZValidForms(t *testing.T) {
	t.Run("form=m128_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_zmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ_Z(reg.X7, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMOVZXWQ_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_ymm", func(t *testing.T) {
		if _, err := VPMOVZXWQ_Z(reg.X7, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULDQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULDQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULDQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULDQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULDQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULDQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULDQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULDQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULDQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULDQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULHRSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULHRSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULHRSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULHRSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULHRSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHRSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULHRSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHRSW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULHRSW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHRSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHRSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHRSW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHRSW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULHRSW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHRSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHRSW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHRSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHRSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHRSW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHRSW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULHUWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULHUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULHUW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULHUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULHUW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULHUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHUW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULHUW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHUW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHUW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHUW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULHUW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHUW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHUW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHUW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHUW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHUW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHUW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULHWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULHW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULHW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULHW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULHW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULHW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULHW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULHW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULHW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULHW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULHW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULLD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULLD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULLD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULLD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULLD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULLD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULLQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULLQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULLQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULLQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULLQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULLQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULLW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULLW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULLW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULLW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULLW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULLW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULLW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULUDQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULUDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULUDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULUDQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULUDQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULUDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULUDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPMULUDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULUDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULUDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPMULUDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULUDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPMULUDQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPMULUDQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPMULUDQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPORValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPOR(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPOR(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPOR(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPOR(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPORDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPORD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPORD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPORD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPORD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPORD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPORD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPORQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPORQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPORQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPORQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPORQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPORQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPORQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPORQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPORQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPORQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPROLD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPROLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPROLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPROLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPROLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPROLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPROLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPROLD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPROLD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPROLD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPROLD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPROLD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPROLD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLQValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPROLQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPROLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPROLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPROLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPROLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPROLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPROLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPROLQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPROLQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPROLQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLQ_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPROLQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLQ_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPROLQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPROLQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLQ_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLQ_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLVDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPROLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPROLVD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPROLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPROLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPROLVD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPROLVD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLVD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPROLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPROLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPROLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLVD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLVD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLVQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPROLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPROLVQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPROLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPROLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPROLVQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPROLVQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLVQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPROLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPROLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPROLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLVQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPROLVQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPROLVQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPROLVQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPROLVQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPRORD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPRORD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPRORD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPRORD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPRORD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPRORD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPRORD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPRORD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPRORD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPRORD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPRORD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPRORD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPRORD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORQValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPRORQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPRORQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPRORQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPRORQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPRORQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPRORQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPRORQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPRORQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPRORQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPRORQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORQ_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPRORQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORQ_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPRORQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPRORQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORQ_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORQ_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORVDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPRORVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPRORVD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPRORVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPRORVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPRORVD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPRORVD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORVD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPRORVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPRORVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPRORVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORVD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORVD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORVQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPRORVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPRORVQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPRORVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPRORVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPRORVQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPRORVQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORVQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPRORVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPRORVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPRORVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORVQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPRORVQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPRORVQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPRORVQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPRORVQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSADBWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSADBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSADBW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSADBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSADBW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSADBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSADBW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSCATTERDDValidForms(t *testing.T) {
	t.Run("form=zmm_k_vm32z", func(t *testing.T) {
		if _, err := VPSCATTERDD(reg.Z31, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Z4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm32x", func(t *testing.T) {
		if _, err := VPSCATTERDD(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_vm32y", func(t *testing.T) {
		if _, err := VPSCATTERDD(reg.Y15, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSCATTERDQValidForms(t *testing.T) {
	t.Run("form=zmm_k_vm32y", func(t *testing.T) {
		if _, err := VPSCATTERDQ(reg.Z31, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm32x", func(t *testing.T) {
		if _, err := VPSCATTERDQ(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_vm32x", func(t *testing.T) {
		if _, err := VPSCATTERDQ(reg.Y15, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSCATTERQDValidForms(t *testing.T) {
	t.Run("form=ymm_k_vm64z", func(t *testing.T) {
		if _, err := VPSCATTERQD(reg.Y15, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Z8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm64x", func(t *testing.T) {
		if _, err := VPSCATTERQD(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm64y", func(t *testing.T) {
		if _, err := VPSCATTERQD(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSCATTERQQValidForms(t *testing.T) {
	t.Run("form=zmm_k_vm64z", func(t *testing.T) {
		if _, err := VPSCATTERQQ(reg.Z31, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Z8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm64x", func(t *testing.T) {
		if _, err := VPSCATTERQQ(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_vm64y", func(t *testing.T) {
		if _, err := VPSCATTERQQ(reg.Y15, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSHUFB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSHUFB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSHUFB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSHUFB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSHUFB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSHUFB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFDValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPSHUFD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPSHUFD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPSHUFD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFHWValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFHW(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFHW_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFHW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFHW_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFHW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFHW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFHW_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFHW_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFLWValidForms(t *testing.T) {
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFLW(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSHUFLW_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFLW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSHUFLW_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFLW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFLW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSHUFLW_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSHUFLW_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSIGNBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSIGNB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSIGNB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSIGNB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSIGNB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSIGNDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSIGND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSIGND(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSIGND(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSIGND(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSIGNWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSIGNW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSIGNW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSIGNW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSIGNW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLDValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLD(reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLD(reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLDQValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLDQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLDQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm", func(t *testing.T) {
		if _, err := VPSLLDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLDQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPSLLDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPSLLDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPSLLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPSLLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPSLLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLD_Z(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLD_Z(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLQValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLQ(reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLQ(reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPSLLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPSLLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPSLLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLQ_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLQ_Z(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLVD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVQValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLVQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVWValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLVW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLVW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLVW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLVW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLVW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLVW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLVW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLWValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSLLW(reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSLLW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLW(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSLLW(reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLW(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSLLW_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSLLW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLW_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSLLW_Z(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSLLW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSLLW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLW_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLW_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSLLW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSLLW_Z(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRADValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAD(reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAD(reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPSRAD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPSRAD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPSRAD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAD_Z(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAD_Z(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAQValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAQ(reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAQ(reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPSRAQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPSRAQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPSRAQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAQ_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAQ_Z(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAVD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAVD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAVD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAVQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAVQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAVQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVWValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAVW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAVW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAVW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAVW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAVW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAVW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAVW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAWValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRAW(reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRAW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAW(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRAW(reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAW(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRAW_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSRAW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAW_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRAW_Z(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSRAW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSRAW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAW_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAW_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRAW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRAW_Z(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLDValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLD(reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLD(reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLDQValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLDQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLDQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm", func(t *testing.T) {
		if _, err := VPSRLDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLDQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPSRLDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPSRLDQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VPSRLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VPSRLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VPSRLD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLD_Z(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLD_Z(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLQValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLQ(reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLQ(reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VPSRLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VPSRLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VPSRLQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLQ_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLQ_Z(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLVD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVQValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLVQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVWValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLVW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLVW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLVW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLVW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLVW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLVW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLVW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLWValidForms(t *testing.T) {
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSRLW(reg.X7, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSRLW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512_zmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLW(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSRLW(reg.X7, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLW(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSRLW_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512_k_zmm", func(t *testing.T) {
		if _, err := VPSRLW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLW_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSRLW_Z(reg.X7, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128_k_xmm", func(t *testing.T) {
		if _, err := VPSRLW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_k_ymm", func(t *testing.T) {
		if _, err := VPSRLW_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLW_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLW_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSRLW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSRLW_Z(reg.X7, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBSBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBSB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBSB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBSB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBSB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBSB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBSB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBSB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBSB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBSB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBSB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBSW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBSW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBSW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBSW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBSW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBSW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBSW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBSW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBUSBValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBUSB(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBUSB(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBUSB(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBUSB(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBUSB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBUSB(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBUSB(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBUSB_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBUSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBUSB_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBUSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBUSB_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBUSB_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBUSB_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBUSWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBUSW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBUSW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBUSW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBUSW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBUSW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBUSW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBUSW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBUSW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBUSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBUSW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBUSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBUSW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBUSW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBUSW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPSUBW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPSUBW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPSUBW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPSUBW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPSUBW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPSUBW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPSUBW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTERNLOGDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTERNLOGD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTERNLOGD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTERNLOGD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTERNLOGQValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGQ(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTERNLOGQ_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTERNLOGQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTERNLOGQ_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPTERNLOGQ_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VPTEST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VPTEST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VPTEST(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VPTEST(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTMBValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMB(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMB(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMB(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMB(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMB(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMB(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTMDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMD(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMD(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMD(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMD(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMD(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMD(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTMD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTMQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMQ(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMQ(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMQ(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMQ(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMQ(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMQ(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTMQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTMWValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMW(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPTESTMW(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTMW(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPTESTMW(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTMW(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPTESTMW(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTNMBValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMB(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMB(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMB(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMB(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMB(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMB(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMB(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTNMDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMD(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMD(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMD(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMD(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMD(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMD(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTNMD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTNMQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMQ(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTNMQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPTESTNMWValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMW(reg.Z31, reg.Z31, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k", func(t *testing.T) {
		if _, err := VPTESTNMW(reg.Z31, reg.Z31, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMW(reg.X7, reg.X7, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k", func(t *testing.T) {
		if _, err := VPTESTNMW(reg.X7, reg.X7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_k", func(t *testing.T) {
		if _, err := VPTESTNMW(reg.Y15, reg.Y15, reg.K7, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k", func(t *testing.T) {
		if _, err := VPTESTNMW(reg.Y15, reg.Y15, reg.K7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHBWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHBW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHBW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHBW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHBW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHDQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHDQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHQDQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHQDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHQDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHQDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHQDQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHWDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHWD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKHWD_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKHWD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKHWD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLBWValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLBW(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLBW_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLBW_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLBW_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLBW_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLDQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLDQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLQDQValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLQDQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLQDQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLQDQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLQDQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLWDValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLWD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPUNPCKLWD_ZValidForms(t *testing.T) {
	t.Run("form=m512_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLWD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPUNPCKLWD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPUNPCKLWD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPXORValidForms(t *testing.T) {
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VPXOR(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPXOR(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VPXOR(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPXOR(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPXORDValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPXORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPXORD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPXORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPXORD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPXORD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPXORD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPXORD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPXORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPXORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPXORD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPXORD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPXORD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPXORQValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPXORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORQ(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VPXORQ(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPXORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPXORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORQ(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VPXORQ(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORQ(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VPXORQ(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPXORQ_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VPXORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VPXORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VPXORQ_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPXORQ_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORQ_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVPXORQ_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VPXORQ_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORQ_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VPXORQ_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VPXORQ_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VRANGEPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VRANGEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VRANGEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VRANGEPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPD_SAE_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPSValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VRANGEPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPS_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VRANGEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VRANGEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VRANGEPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPS_SAE_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGEPS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRANGEPS_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGEPS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRANGEPS_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGESDValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGESD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGESD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGESD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGESD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGESD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESD_SAE_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGESD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGESSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGESS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGESS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGESS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRANGESS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGESS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESS_SAE_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRANGESS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRANGESS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14PDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRCP14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRCP14PD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VRCP14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VRCP14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VRCP14PD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VRCP14PD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRCP14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VRCP14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VRCP14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14PSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRCP14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRCP14PS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VRCP14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VRCP14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VRCP14PS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VRCP14PS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRCP14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VRCP14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VRCP14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP14PS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14PS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VRCP14PS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP14SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP14SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP14SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP14SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP14SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP14SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRCP28PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRCP28PD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRCP28PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRCP28PD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRCP28PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRCP28PS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRCP28PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PS_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PS_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRCP28PS_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PS_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRCP28PS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP28SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP28SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28SD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP28SD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28SD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP28SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP28SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28SS_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SS_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRCP28SS_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28SS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SS_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCP28SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRCP28SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCPPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VRCPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VRCPPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VRCPPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VRCPPS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRCPSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VRCPSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRCPSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCEPDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VREDUCEPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCEPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VREDUCEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VREDUCEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VREDUCEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCEPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCEPD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCEPSValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VREDUCEPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCEPS_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VREDUCEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VREDUCEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VREDUCEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCEPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCEPS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VREDUCEPS_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCEPS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VREDUCEPS_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCESDValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCESD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64_xmm_xmm", func(t *testing.T) {
		if _, err := VREDUCESD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCESD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VREDUCESD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCESD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCESD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCESD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCESSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCESS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32_xmm_xmm", func(t *testing.T) {
		if _, err := VREDUCESS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCESS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VREDUCESS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVREDUCESS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCESS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VREDUCESS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPDValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_SAE_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPSValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPS_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_SAE(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_SAE_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALEPS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_k_zmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_k_ymm", func(t *testing.T) {
		if _, err := VRNDSCALEPS_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALESDValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64_xmm_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALESD_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESD_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALESD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESD_SAE_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALESD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALESSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32_xmm_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALESS_SAEValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESS_SAE(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALESS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESS_SAE_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRNDSCALESS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRNDSCALESS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVROUNDPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VROUNDPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VROUNDPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VROUNDPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VROUNDPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVROUNDPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm", func(t *testing.T) {
		if _, err := VROUNDPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm", func(t *testing.T) {
		if _, err := VROUNDPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm", func(t *testing.T) {
		if _, err := VROUNDPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm", func(t *testing.T) {
		if _, err := VROUNDPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVROUNDSDValidForms(t *testing.T) {
	t.Run("form=imm8_m64_xmm_xmm", func(t *testing.T) {
		if _, err := VROUNDSD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VROUNDSD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVROUNDSSValidForms(t *testing.T) {
	t.Run("form=imm8_m32_xmm_xmm", func(t *testing.T) {
		if _, err := VROUNDSS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VROUNDSS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14PDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14PSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14PS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VRSQRT14PS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT14SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT14SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PS_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28PS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VRSQRT28PS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28SDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28SD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28SD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28SD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28SSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28SS_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SS_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SS_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28SS_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SS_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRT28SS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VRSQRT28SS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRTPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VRSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VRSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRTPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VRSQRTPS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVRSQRTSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VRSQRTSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPDValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSCALEFPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSCALEFPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSCALEFPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPSValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSCALEFPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSCALEFPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSCALEFPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSCALEFPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSCALEFPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCALEFSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSCALEFSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCATTERDPDValidForms(t *testing.T) {
	t.Run("form=zmm_k_vm32y", func(t *testing.T) {
		if _, err := VSCATTERDPD(reg.Z31, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm32x", func(t *testing.T) {
		if _, err := VSCATTERDPD(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_vm32x", func(t *testing.T) {
		if _, err := VSCATTERDPD(reg.Y15, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCATTERDPSValidForms(t *testing.T) {
	t.Run("form=zmm_k_vm32z", func(t *testing.T) {
		if _, err := VSCATTERDPS(reg.Z31, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Z4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm32x", func(t *testing.T) {
		if _, err := VSCATTERDPS(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_vm32y", func(t *testing.T) {
		if _, err := VSCATTERDPS(reg.Y15, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Y4, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCATTERQPDValidForms(t *testing.T) {
	t.Run("form=zmm_k_vm64z", func(t *testing.T) {
		if _, err := VSCATTERQPD(reg.Z31, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Z8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm64x", func(t *testing.T) {
		if _, err := VSCATTERQPD(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_vm64y", func(t *testing.T) {
		if _, err := VSCATTERQPD(reg.Y15, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSCATTERQPSValidForms(t *testing.T) {
	t.Run("form=ymm_k_vm64z", func(t *testing.T) {
		if _, err := VSCATTERQPS(reg.Y15, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Z8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm64x", func(t *testing.T) {
		if _, err := VSCATTERQPS(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.X8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_vm64y", func(t *testing.T) {
		if _, err := VSCATTERQPS(reg.X7, reg.K7, operand.Mem{Base: reg.R13, Index: reg.Y8, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFF32X4ValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFF32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFF32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFF32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFF32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFF32X4_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF32X4_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFF32X4_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF32X4_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFF32X4_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFF32X4_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF32X4_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF32X4_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFF32X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF32X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF32X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF32X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF32X4_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFF64X2ValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFF64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFF64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFF64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFF64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFF64X2_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF64X2_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFF64X2_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF64X2_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFF64X2_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFF64X2_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF64X2_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF64X2_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFF64X2_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF64X2_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFF64X2_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF64X2_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFF64X2_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFI32X4ValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFI32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFI32X4(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFI32X4(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFI32X4(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFI32X4_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI32X4_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFI32X4_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI32X4_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFI32X4_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFI32X4_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI32X4_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI32X4_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFI32X4_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI32X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI32X4_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI32X4_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI32X4_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFI64X2ValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFI64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFI64X2(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFI64X2(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFI64X2(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFI64X2_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI64X2_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFI64X2_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI64X2_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFI64X2_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFI64X2_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI64X2_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI64X2_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFI64X2_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI64X2_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFI64X2_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI64X2_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFI64X2_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFPDValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPD(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFPD_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSHUFPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFPD_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPD_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFPD_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPD_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPD_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPD_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPD_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFPSValidForms(t *testing.T) {
	t.Run("form=imm8_m128_xmm_xmm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPS(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFPS_BCSTValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSHUFPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSHUFPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSHUFPS_BCST(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPS_BCST_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSHUFPS_ZValidForms(t *testing.T) {
	t.Run("form=imm8_m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSHUFPS_Z(operand.Imm(math.MaxInt8), reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPS_Z(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSHUFPS_Z(operand.Imm(math.MaxInt8), reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSHUFPS_Z(operand.Imm(math.MaxInt8), reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VSQRTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VSQRTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VSQRTPD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VSQRTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPD(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VSQRTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VSQRTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPD(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPD(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VSQRTPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VSQRTPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPD_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPD_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPD_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VSQRTPS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPS(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VSQRTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPS(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPS(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm", func(t *testing.T) {
		if _, err := VSQRTPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm", func(t *testing.T) {
		if _, err := VSQRTPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RD_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RD_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RD_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RN_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RN_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RN_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RU_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RU_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RU_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RZ_SAE(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RZ_SAE(reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_RZ_SAE_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_k_zmm", func(t *testing.T) {
		if _, err := VSQRTPS_Z(reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTPS_Z(reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_k_ymm", func(t *testing.T) {
		if _, err := VSQRTPS_Z(reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSQRTSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSQRTSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSTMXCSRValidForms(t *testing.T) {
	t.Run("form=m32", func(t *testing.T) {
		if _, err := VSTMXCSR(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSUBPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSUBPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSUBPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VSUBPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSUBPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VSUBPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RD_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RD_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RD_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RN_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RN_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RN_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RU_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RU_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RU_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RZ_SAE(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RZ_SAE(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_RZ_SAE_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VSUBPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VSUBPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSDValidForms(t *testing.T) {
	t.Run("form=m64_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSD_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSD_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSD_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSD_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSD_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSD_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSD_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSD_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSD_ZValidForms(t *testing.T) {
	t.Run("form=m64_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSSValidForms(t *testing.T) {
	t.Run("form=m32_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSS_RD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RD_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RD_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSS_RD_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RD_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSS_RN_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RN_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RN_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSS_RN_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RN_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSS_RU_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RU_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RU_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSS_RU_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RU_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSS_RZ_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RZ_SAE(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RZ_SAE(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSS_RZ_SAE_ZValidForms(t *testing.T) {
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_RZ_SAE_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVSUBSS_ZValidForms(t *testing.T) {
	t.Run("form=m32_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_Z(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VSUBSS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVTESTPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VTESTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VTESTPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VTESTPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VTESTPD(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVTESTPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := VTESTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm", func(t *testing.T) {
		if _, err := VTESTPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VTESTPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm", func(t *testing.T) {
		if _, err := VTESTPS(reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUCOMISDValidForms(t *testing.T) {
	t.Run("form=m64_xmm", func(t *testing.T) {
		if _, err := VUCOMISD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VUCOMISD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUCOMISD_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VUCOMISD_SAE(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUCOMISSValidForms(t *testing.T) {
	t.Run("form=m32_xmm", func(t *testing.T) {
		if _, err := VUCOMISS(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VUCOMISS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUCOMISS_SAEValidForms(t *testing.T) {
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := VUCOMISS_SAE(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKHPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKHPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKHPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKHPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKHPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKHPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKHPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKHPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKHPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKHPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKLPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKLPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKLPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKLPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKLPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKLPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKLPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVUNPCKLPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VUNPCKLPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VUNPCKLPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVXORPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VXORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VXORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VXORPD(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VXORPD(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VXORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPD(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VXORPD(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VXORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VXORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPD(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPD(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVXORPD_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m64bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VXORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VXORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VXORPD_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVXORPD_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPD_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVXORPD_ZValidForms(t *testing.T) {
	t.Run("form=m512/m64bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPD_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m64bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m64bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPD_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPD_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPD_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVXORPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm_xmm", func(t *testing.T) {
		if _, err := VXORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256_ymm_ymm", func(t *testing.T) {
		if _, err := VXORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_xmm", func(t *testing.T) {
		if _, err := VXORPS(reg.X7, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_ymm", func(t *testing.T) {
		if _, err := VXORPS(reg.Y15, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VXORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPS(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_zmm", func(t *testing.T) {
		if _, err := VXORPS(reg.Z31, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VXORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VXORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPS(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPS(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVXORPS_BCSTValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m512/m32bcst_zmm_zmm", func(t *testing.T) {
		if _, err := VXORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_xmm", func(t *testing.T) {
		if _, err := VXORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_ymm", func(t *testing.T) {
		if _, err := VXORPS_BCST(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVXORPS_BCST_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPS_BCST_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVXORPS_ZValidForms(t *testing.T) {
	t.Run("form=m512/m32bcst_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=zmm_zmm_k_zmm", func(t *testing.T) {
		if _, err := VXORPS_Z(reg.Z31, reg.Z31, reg.K7, reg.Z31); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m128/m32bcst_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m256/m32bcst_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPS_Z(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm_k_xmm", func(t *testing.T) {
		if _, err := VXORPS_Z(reg.X7, reg.X7, reg.K7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=ymm_ymm_k_ymm", func(t *testing.T) {
		if _, err := VXORPS_Z(reg.Y15, reg.Y15, reg.K7, reg.Y15); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVZEROALLValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := VZEROALL(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestVZEROUPPERValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := VZEROUPPER(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXADDBValidForms(t *testing.T) {
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := XADDB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := XADDB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXADDLValidForms(t *testing.T) {
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := XADDL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := XADDL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXADDQValidForms(t *testing.T) {
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := XADDQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := XADDQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXADDWValidForms(t *testing.T) {
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := XADDW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := XADDW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XADDW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXCHGBValidForms(t *testing.T) {
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := XCHGB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := XCHGB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := XCHGB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXCHGLValidForms(t *testing.T) {
	t.Run("form=eax_r32", func(t *testing.T) {
		if _, err := XCHGL(reg.EAX, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := XCHGL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_eax", func(t *testing.T) {
		if _, err := XCHGL(reg.R10L, reg.EAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := XCHGL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := XCHGL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXCHGQValidForms(t *testing.T) {
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := XCHGQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := XCHGQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := XCHGQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_rax", func(t *testing.T) {
		if _, err := XCHGQ(reg.R11, reg.RAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=rax_r64", func(t *testing.T) {
		if _, err := XCHGQ(reg.RAX, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXCHGWValidForms(t *testing.T) {
	t.Run("form=ax_r16", func(t *testing.T) {
		if _, err := XCHGW(reg.AX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGW(reg.AX, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := XCHGW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_ax", func(t *testing.T) {
		if _, err := XCHGW(reg.CX, reg.AX); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGW(reg.R9W, reg.AX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := XCHGW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := XCHGW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XCHGW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXGETBVValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := XGETBV(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXLATValidForms(t *testing.T) {
	t.Run("form=", func(t *testing.T) {
		if _, err := XLAT(); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXORBValidForms(t *testing.T) {
	t.Run("form=imm8_al", func(t *testing.T) {
		if _, err := XORB(operand.Imm(math.MaxInt8), reg.AL); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m8", func(t *testing.T) {
		if _, err := XORB(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r8", func(t *testing.T) {
		if _, err := XORB(operand.Imm(math.MaxInt8), reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(operand.Imm(math.MaxInt8), reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(operand.Imm(math.MaxInt8), reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m8_r8", func(t *testing.T) {
		if _, err := XORB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_m8", func(t *testing.T) {
		if _, err := XORB(reg.CH, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.BL, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.R13B, operand.Mem{Base: reg.BL, Index: reg.CH, Scale: 1}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r8_r8", func(t *testing.T) {
		if _, err := XORB(reg.CH, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.CH, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.CH, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.BL, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.BL, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.BL, reg.R13B); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.R13B, reg.CH); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.R13B, reg.BL); err != nil {
			t.Fatal(err)
		}
		if _, err := XORB(reg.R13B, reg.R13B); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXORLValidForms(t *testing.T) {
	t.Run("form=imm32_eax", func(t *testing.T) {
		if _, err := XORL(operand.Imm(math.MaxInt32), reg.EAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_m32", func(t *testing.T) {
		if _, err := XORL(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r32", func(t *testing.T) {
		if _, err := XORL(operand.Imm(math.MaxInt32), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m32", func(t *testing.T) {
		if _, err := XORL(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r32", func(t *testing.T) {
		if _, err := XORL(operand.Imm(math.MaxInt8), reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m32_r32", func(t *testing.T) {
		if _, err := XORL(operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_m32", func(t *testing.T) {
		if _, err := XORL(reg.R10L, operand.Mem{Base: reg.EBX, Index: reg.ECX, Scale: 4}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r32_r32", func(t *testing.T) {
		if _, err := XORL(reg.R10L, reg.R10L); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXORPDValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := XORPD(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := XORPD(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXORPSValidForms(t *testing.T) {
	t.Run("form=m128_xmm", func(t *testing.T) {
		if _, err := XORPS(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=xmm_xmm", func(t *testing.T) {
		if _, err := XORPS(reg.X7, reg.X7); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXORQValidForms(t *testing.T) {
	t.Run("form=imm32_m64", func(t *testing.T) {
		if _, err := XORQ(operand.Imm(math.MaxInt32), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_r64", func(t *testing.T) {
		if _, err := XORQ(operand.Imm(math.MaxInt32), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm32_rax", func(t *testing.T) {
		if _, err := XORQ(operand.Imm(math.MaxInt32), reg.RAX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m64", func(t *testing.T) {
		if _, err := XORQ(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r64", func(t *testing.T) {
		if _, err := XORQ(operand.Imm(math.MaxInt8), reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m64_r64", func(t *testing.T) {
		if _, err := XORQ(operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_m64", func(t *testing.T) {
		if _, err := XORQ(reg.R11, operand.Mem{Base: reg.RBX, Index: reg.RCX, Scale: 8}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r64_r64", func(t *testing.T) {
		if _, err := XORQ(reg.R11, reg.R11); err != nil {
			t.Fatal(err)
		}
	})
}

func TestXORWValidForms(t *testing.T) {
	t.Run("form=imm16_ax", func(t *testing.T) {
		if _, err := XORW(operand.Imm(math.MaxInt16), reg.AX); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_m16", func(t *testing.T) {
		if _, err := XORW(operand.Imm(math.MaxInt16), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm16_r16", func(t *testing.T) {
		if _, err := XORW(operand.Imm(math.MaxInt16), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XORW(operand.Imm(math.MaxInt16), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_m16", func(t *testing.T) {
		if _, err := XORW(operand.Imm(math.MaxInt8), operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=imm8_r16", func(t *testing.T) {
		if _, err := XORW(operand.Imm(math.MaxInt8), reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XORW(operand.Imm(math.MaxInt8), reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=m16_r16", func(t *testing.T) {
		if _, err := XORW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XORW(operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_m16", func(t *testing.T) {
		if _, err := XORW(reg.CX, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
		if _, err := XORW(reg.R9W, operand.Mem{Base: reg.BX, Index: reg.CX, Scale: 2}); err != nil {
			t.Fatal(err)
		}
	})
	t.Run("form=r16_r16", func(t *testing.T) {
		if _, err := XORW(reg.CX, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XORW(reg.CX, reg.R9W); err != nil {
			t.Fatal(err)
		}
		if _, err := XORW(reg.R9W, reg.CX); err != nil {
			t.Fatal(err)
		}
		if _, err := XORW(reg.R9W, reg.R9W); err != nil {
			t.Fatal(err)
		}
	})
}
